
SortingAlgorithm.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000d4a  00000dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ca  00800086  00800086  00000e04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001293  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a67  00000000  00000000  00002227  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b45  00000000  00000000  00002c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000037d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba3  00000000  00000000  00003e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004a02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 35       	cpi	r26, 0x50	; 80
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  8a:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
#include "keypad.h"

void keypad_init()
{
	CLR_BIT(DDRD, 7);
  92:	81 b3       	in	r24, 0x11	; 17
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD, 6);
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	8f 7b       	andi	r24, 0xBF	; 191
  9c:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD, 5);
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD, 3);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	81 bb       	out	0x11, r24	; 17
	
	SET_BIT(DDRC, 5);
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC, 4);
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC, 3);
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC, 2);
  bc:	84 b3       	in	r24, 0x14	; 20
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	84 bb       	out	0x14, r24	; 20
	
	SET_BIT(PORTD, 7);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD, 6);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD, 5);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD, 3);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret

000000dc <keypad_get_value>:
}

char keypad_get_value(void)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	60 97       	sbiw	r28, 0x10	; 16
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
	const unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	e0 e6       	ldi	r30, 0x60	; 96
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	de 01       	movw	r26, r28
  f8:	11 96       	adiw	r26, 0x01	; 1
  fa:	01 90       	ld	r0, Z+
  fc:	0d 92       	st	X+, r0
  fe:	8a 95       	dec	r24
 100:	e1 f7       	brne	.-8      	; 0xfa <keypad_get_value+0x1e>
	unsigned char col, row, ans = INVALID_KEYPAD_PRESS;
 102:	8f ef       	ldi	r24, 0xFF	; 255
	
	for(row = 5; row >= 2; row--)
 104:	e5 e0       	ldi	r30, 0x05	; 5
 106:	67 c0       	rjmp	.+206    	; 0x1d6 <keypad_get_value+0xfa>
	{
		PORTC |= 0b00111100;
 108:	95 b3       	in	r25, 0x15	; 21
 10a:	9c 63       	ori	r25, 0x3C	; 60
 10c:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(PORTC, row);
 10e:	95 b3       	in	r25, 0x15	; 21
 110:	6e 2f       	mov	r22, r30
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	0e 2e       	mov	r0, r30
 11a:	02 c0       	rjmp	.+4      	; 0x120 <keypad_get_value+0x44>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <keypad_get_value+0x40>
 124:	20 95       	com	r18
 126:	29 23       	and	r18, r25
 128:	25 bb       	out	0x15, r18	; 21
		for(col = 7; col >= 3; col--)
 12a:	97 e0       	ldi	r25, 0x07	; 7
 12c:	50 c0       	rjmp	.+160    	; 0x1ce <keypad_get_value+0xf2>
		{
			if (col == 4)
 12e:	94 30       	cpi	r25, 0x04	; 4
 130:	09 f4       	brne	.+2      	; 0x134 <keypad_get_value+0x58>
				col--;
 132:	91 50       	subi	r25, 0x01	; 1
			if (GET_BIT(PIND, col) == 0)
 134:	20 b3       	in	r18, 0x10	; 16
 136:	49 2f       	mov	r20, r25
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	09 2e       	mov	r0, r25
 13e:	02 c0       	rjmp	.+4      	; 0x144 <keypad_get_value+0x68>
 140:	35 95       	asr	r19
 142:	27 95       	ror	r18
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <keypad_get_value+0x64>
 148:	20 fd       	sbrc	r18, 0
 14a:	40 c0       	rjmp	.+128    	; 0x1cc <keypad_get_value+0xf0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	af e2       	ldi	r26, 0x2F	; 47
 14e:	b5 e7       	ldi	r27, 0x75	; 117
 150:	11 97       	sbiw	r26, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <keypad_get_value+0x74>
 154:	00 c0       	rjmp	.+0      	; 0x156 <keypad_get_value+0x7a>
 156:	00 00       	nop
			{
				_delay_ms(120);
				if (GET_BIT(PIND, col) == 0)
 158:	20 b3       	in	r18, 0x10	; 16
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	09 2e       	mov	r0, r25
 15e:	02 c0       	rjmp	.+4      	; 0x164 <keypad_get_value+0x88>
 160:	35 95       	asr	r19
 162:	27 95       	ror	r18
 164:	0a 94       	dec	r0
 166:	e2 f7       	brpl	.-8      	; 0x160 <keypad_get_value+0x84>
 168:	20 fd       	sbrc	r18, 0
 16a:	30 c0       	rjmp	.+96     	; 0x1cc <keypad_get_value+0xf0>
				{
					if (col==3)
 16c:	93 30       	cpi	r25, 0x03	; 3
 16e:	b9 f4       	brne	.+46     	; 0x19e <keypad_get_value+0xc2>
					{
						ans = arr[5 - row][7 - col - 1];
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	86 1b       	sub	r24, r22
 176:	97 0b       	sbc	r25, r23
 178:	26 e0       	ldi	r18, 0x06	; 6
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	24 1b       	sub	r18, r20
 17e:	35 0b       	sbc	r19, r21
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	4c 0f       	add	r20, r28
 18e:	5d 1f       	adc	r21, r29
 190:	84 0f       	add	r24, r20
 192:	95 1f       	adc	r25, r21
 194:	dc 01       	movw	r26, r24
 196:	a2 0f       	add	r26, r18
 198:	b3 1f       	adc	r27, r19
 19a:	8c 91       	ld	r24, X
						break;
 19c:	1b c0       	rjmp	.+54     	; 0x1d4 <keypad_get_value+0xf8>
					}
					else
					{
						ans =arr[5 - row][7 - col];
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	86 1b       	sub	r24, r22
 1a4:	97 0b       	sbc	r25, r23
 1a6:	27 e0       	ldi	r18, 0x07	; 7
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	24 1b       	sub	r18, r20
 1ac:	35 0b       	sbc	r19, r21
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	a1 e0       	ldi	r26, 0x01	; 1
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	ac 0f       	add	r26, r28
 1bc:	bd 1f       	adc	r27, r29
 1be:	8a 0f       	add	r24, r26
 1c0:	9b 1f       	adc	r25, r27
 1c2:	dc 01       	movw	r26, r24
 1c4:	a2 0f       	add	r26, r18
 1c6:	b3 1f       	adc	r27, r19
 1c8:	8c 91       	ld	r24, X
						break;
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <keypad_get_value+0xf8>
	
	for(row = 5; row >= 2; row--)
	{
		PORTC |= 0b00111100;
		CLR_BIT(PORTC, row);
		for(col = 7; col >= 3; col--)
 1cc:	91 50       	subi	r25, 0x01	; 1
 1ce:	93 30       	cpi	r25, 0x03	; 3
 1d0:	08 f0       	brcs	.+2      	; 0x1d4 <keypad_get_value+0xf8>
 1d2:	ad cf       	rjmp	.-166    	; 0x12e <keypad_get_value+0x52>
char keypad_get_value(void)
{
	const unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
	unsigned char col, row, ans = INVALID_KEYPAD_PRESS;
	
	for(row = 5; row >= 2; row--)
 1d4:	e1 50       	subi	r30, 0x01	; 1
 1d6:	e2 30       	cpi	r30, 0x02	; 2
 1d8:	08 f0       	brcs	.+2      	; 0x1dc <keypad_get_value+0x100>
 1da:	96 cf       	rjmp	.-212    	; 0x108 <keypad_get_value+0x2c>
				}
			}
		}
	}
	return ans;
 1dc:	60 96       	adiw	r28, 0x10	; 16
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <LCD_command>:
	LCD_command(0x80);
}

void LCD_command(unsigned char cmd)
{
	CLR_BIT(PORTA, 3);
 1ee:	9b b3       	in	r25, 0x1b	; 27
 1f0:	97 7f       	andi	r25, 0xF7	; 247
 1f2:	9b bb       	out	0x1b, r25	; 27
	
	PORTB &= 0b11101000;
 1f4:	98 b3       	in	r25, 0x18	; 24
 1f6:	98 7e       	andi	r25, 0xE8	; 232
 1f8:	98 bb       	out	0x18, r25	; 24
	unsigned char high = (cmd & 0xf0) >> 4;					//1111 0000		=>	 	//0000 1111
 1fa:	28 2f       	mov	r18, r24
 1fc:	22 95       	swap	r18
 1fe:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char temp = ((high & 0b00001000) << 1) | (high & 0b00000111);			//0001 0111
 200:	92 2f       	mov	r25, r18
 202:	98 70       	andi	r25, 0x08	; 8
 204:	49 2f       	mov	r20, r25
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	44 0f       	add	r20, r20
 20a:	55 1f       	adc	r21, r21
 20c:	27 70       	andi	r18, 0x07	; 7
 20e:	42 2b       	or	r20, r18
	PORTB |= temp;
 210:	98 b3       	in	r25, 0x18	; 24
 212:	49 2b       	or	r20, r25
 214:	48 bb       	out	0x18, r20	; 24
	
	CLR_BIT(PORTA, 2);
 216:	9b b3       	in	r25, 0x1b	; 27
 218:	9b 7f       	andi	r25, 0xFB	; 251
 21a:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(PORTA, 2);
 21c:	9b b3       	in	r25, 0x1b	; 27
 21e:	94 60       	ori	r25, 0x04	; 4
 220:	9b bb       	out	0x1b, r25	; 27
 222:	ef e9       	ldi	r30, 0x9F	; 159
 224:	ff e0       	ldi	r31, 0x0F	; 15
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_command+0x38>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_command+0x3e>
 22c:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 22e:	9b b3       	in	r25, 0x1b	; 27
 230:	9b 7f       	andi	r25, 0xFB	; 251
 232:	9b bb       	out	0x1b, r25	; 27
	
	
	PORTB &= 0b11101000;
 234:	98 b3       	in	r25, 0x18	; 24
 236:	98 7e       	andi	r25, 0xE8	; 232
 238:	98 bb       	out	0x18, r25	; 24
	unsigned char low = cmd & 0x0f;
	unsigned char temp2 = ((low & 0b00001000) << 1) | (low & 0b00000111);
 23a:	98 2f       	mov	r25, r24
 23c:	98 70       	andi	r25, 0x08	; 8
 23e:	29 2f       	mov	r18, r25
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	87 70       	andi	r24, 0x07	; 7
 248:	28 2b       	or	r18, r24
	PORTB |= temp2;
 24a:	88 b3       	in	r24, 0x18	; 24
 24c:	28 2b       	or	r18, r24
 24e:	28 bb       	out	0x18, r18	; 24
	
	CLR_BIT(PORTA, 2);
 250:	8b b3       	in	r24, 0x1b	; 27
 252:	8b 7f       	andi	r24, 0xFB	; 251
 254:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA, 2);
 256:	8b b3       	in	r24, 0x1b	; 27
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	8b bb       	out	0x1b, r24	; 27
 25c:	8f e9       	ldi	r24, 0x9F	; 159
 25e:	9f e0       	ldi	r25, 0x0F	; 15
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_command+0x72>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_command+0x78>
 266:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	8b 7f       	andi	r24, 0xFB	; 251
 26c:	8b bb       	out	0x1b, r24	; 27
 26e:	ef e1       	ldi	r30, 0x1F	; 31
 270:	fe e4       	ldi	r31, 0x4E	; 78
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_command+0x84>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_command+0x8a>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <LCD_init>:
#include "LCD.h"

void LCD_init(void)
{
	SET_BIT(DDRA, 2);
 27c:	8a b3       	in	r24, 0x1a	; 26
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA, 3);
 282:	8a b3       	in	r24, 0x1a	; 26
 284:	88 60       	ori	r24, 0x08	; 8
 286:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRB, 0);
 288:	87 b3       	in	r24, 0x17	; 23
 28a:	81 60       	ori	r24, 0x01	; 1
 28c:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 1);
 28e:	87 b3       	in	r24, 0x17	; 23
 290:	82 60       	ori	r24, 0x02	; 2
 292:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 2);
 294:	87 b3       	in	r24, 0x17	; 23
 296:	84 60       	ori	r24, 0x04	; 4
 298:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 4);
 29a:	87 b3       	in	r24, 0x17	; 23
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	87 bb       	out	0x17, r24	; 23
 2a0:	8f e5       	ldi	r24, 0x5F	; 95
 2a2:	9a ee       	ldi	r25, 0xEA	; 234
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_init+0x28>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_init+0x2e>
 2aa:	00 00       	nop
	
	_delay_ms(15);
	LCD_command(0x02);
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_command>
	LCD_command(0x28);
 2b2:	88 e2       	ldi	r24, 0x28	; 40
 2b4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_command>
	LCD_command(0x0c);
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
 2ba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_command>
	LCD_command(0x01);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_command>
	LCD_command(0x80);
 2c4:	80 e8       	ldi	r24, 0x80	; 128
 2c6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_command>
 2ca:	08 95       	ret

000002cc <LCD_char>:
	_delay_ms(5);
}

void LCD_char(unsigned char chr)
{
	SET_BIT(PORTA, 3);
 2cc:	9b b3       	in	r25, 0x1b	; 27
 2ce:	98 60       	ori	r25, 0x08	; 8
 2d0:	9b bb       	out	0x1b, r25	; 27
	
	PORTB &= 0b11101000;
 2d2:	98 b3       	in	r25, 0x18	; 24
 2d4:	98 7e       	andi	r25, 0xE8	; 232
 2d6:	98 bb       	out	0x18, r25	; 24
	unsigned char high = (chr & 0xf0) >> 4;					//1111 0000		=>	 	//0000 1111
 2d8:	28 2f       	mov	r18, r24
 2da:	22 95       	swap	r18
 2dc:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char temp = ((high & 0b00001000) << 1) | (high & 0b00000111);			//0001 0111
 2de:	92 2f       	mov	r25, r18
 2e0:	98 70       	andi	r25, 0x08	; 8
 2e2:	49 2f       	mov	r20, r25
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	44 0f       	add	r20, r20
 2e8:	55 1f       	adc	r21, r21
 2ea:	27 70       	andi	r18, 0x07	; 7
 2ec:	42 2b       	or	r20, r18
	PORTB |= temp;
 2ee:	98 b3       	in	r25, 0x18	; 24
 2f0:	49 2b       	or	r20, r25
 2f2:	48 bb       	out	0x18, r20	; 24
	
	CLR_BIT(PORTA, 2);
 2f4:	9b b3       	in	r25, 0x1b	; 27
 2f6:	9b 7f       	andi	r25, 0xFB	; 251
 2f8:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(PORTA, 2);
 2fa:	9b b3       	in	r25, 0x1b	; 27
 2fc:	94 60       	ori	r25, 0x04	; 4
 2fe:	9b bb       	out	0x1b, r25	; 27
 300:	ef e9       	ldi	r30, 0x9F	; 159
 302:	ff e0       	ldi	r31, 0x0F	; 15
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_char+0x38>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_char+0x3e>
 30a:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 30c:	9b b3       	in	r25, 0x1b	; 27
 30e:	9b 7f       	andi	r25, 0xFB	; 251
 310:	9b bb       	out	0x1b, r25	; 27
	
	
	PORTB &= 0b11101000;
 312:	98 b3       	in	r25, 0x18	; 24
 314:	98 7e       	andi	r25, 0xE8	; 232
 316:	98 bb       	out	0x18, r25	; 24
	unsigned char low = chr & 0x0f;
	unsigned char temp2 = ((low & 0b00001000) << 1) | (low & 0b00000111);
 318:	98 2f       	mov	r25, r24
 31a:	98 70       	andi	r25, 0x08	; 8
 31c:	29 2f       	mov	r18, r25
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	87 70       	andi	r24, 0x07	; 7
 326:	28 2b       	or	r18, r24
	PORTB |= temp2;
 328:	88 b3       	in	r24, 0x18	; 24
 32a:	28 2b       	or	r18, r24
 32c:	28 bb       	out	0x18, r18	; 24
	
	CLR_BIT(PORTA, 2);
 32e:	8b b3       	in	r24, 0x1b	; 27
 330:	8b 7f       	andi	r24, 0xFB	; 251
 332:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA, 2);
 334:	8b b3       	in	r24, 0x1b	; 27
 336:	84 60       	ori	r24, 0x04	; 4
 338:	8b bb       	out	0x1b, r24	; 27
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_char+0x72>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_char+0x78>
 344:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 346:	8b b3       	in	r24, 0x1b	; 27
 348:	8b 7f       	andi	r24, 0xFB	; 251
 34a:	8b bb       	out	0x1b, r24	; 27
 34c:	ef e1       	ldi	r30, 0x1F	; 31
 34e:	fe e4       	ldi	r31, 0x4E	; 78
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_char+0x84>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_char+0x8a>
 356:	00 00       	nop
 358:	08 95       	ret

0000035a <LCD_string>:
	_delay_ms(5);

}

void LCD_string(char* str)
{
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++)
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	d0 e0       	ldi	r29, 0x00	; 0
 368:	03 c0       	rjmp	.+6      	; 0x370 <LCD_string+0x16>
	{
		LCD_char(str[i]);
 36a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_char>

}

void LCD_string(char* str)
{
	for (int i = 0; str[i]; i++)
 36e:	21 96       	adiw	r28, 0x01	; 1
 370:	f8 01       	movw	r30, r16
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	80 81       	ld	r24, Z
 378:	81 11       	cpse	r24, r1
 37a:	f7 cf       	rjmp	.-18     	; 0x36a <LCD_string+0x10>
	{
		LCD_char(str[i]);
	}
}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <LCD_clear>:

void LCD_clear()
{
	LCD_command(0x01);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_command>
 38c:	8f e3       	ldi	r24, 0x3F	; 63
 38e:	9c e9       	ldi	r25, 0x9C	; 156
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_clear+0xa>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_clear+0x10>
 396:	00 00       	nop
 398:	08 95       	ret

0000039a <LCD_gotoxy>:
}

void LCD_gotoxy(unsigned char row, unsigned char col)
{
	unsigned char address = 0;
	switch(row)
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	39 f0       	breq	.+14     	; 0x3ac <LCD_gotoxy+0x12>
 39e:	58 f0       	brcs	.+22     	; 0x3b6 <LCD_gotoxy+0x1c>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <LCD_gotoxy+0x16>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	31 f0       	breq	.+12     	; 0x3b4 <LCD_gotoxy+0x1a>
	_delay_ms(10);
}

void LCD_gotoxy(unsigned char row, unsigned char col)
{
	unsigned char address = 0;
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <LCD_gotoxy+0x1c>
	{
		case 0:
		address = col;
		break;
		case 1:
		address = col + 0x40;
 3ac:	60 5c       	subi	r22, 0xC0	; 192
		break;
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <LCD_gotoxy+0x1c>
		case 2:
		address = col + 0x14;
 3b0:	6c 5e       	subi	r22, 0xEC	; 236
		break;
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <LCD_gotoxy+0x1c>
		case 3:
		address = col + 0x54;
 3b4:	6c 5a       	subi	r22, 0xAC	; 172
		break;
	}
	LCD_command(address | 0x80);
 3b6:	86 2f       	mov	r24, r22
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_command>
 3be:	08 95       	ret

000003c0 <main>:
#include "sorting.h"

int main(void)
{
	keypad_init();	
 3c0:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
	LCD_init();
 3c4:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_init>
	sort_init();
 3c8:	0e 94 8f 02 	call	0x51e	; 0x51e <sort_init>
 	seven_segment_init();
 3cc:	0e 94 ef 01 	call	0x3de	; 0x3de <seven_segment_init>
	input_numbers();
 3d0:	0e 94 a2 02 	call	0x544	; 0x544 <input_numbers>
	sort();
 3d4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sort>
	display_numbers();
 3d8:	0e 94 2f 03 	call	0x65e	; 0x65e <display_numbers>
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <main+0x1c>

000003de <seven_segment_init>:
#include "seven_segment.h"

void seven_segment_init(void)
{
	SET_BIT(DDRB,0);
 3de:	87 b3       	in	r24, 0x17	; 23
 3e0:	81 60       	ori	r24, 0x01	; 1
 3e2:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,1);
 3e4:	87 b3       	in	r24, 0x17	; 23
 3e6:	82 60       	ori	r24, 0x02	; 2
 3e8:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,2);
 3ea:	87 b3       	in	r24, 0x17	; 23
 3ec:	84 60       	ori	r24, 0x04	; 4
 3ee:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,4);
 3f0:	87 b3       	in	r24, 0x17	; 23
 3f2:	80 61       	ori	r24, 0x10	; 16
 3f4:	87 bb       	out	0x17, r24	; 23
	PORTB &= 0b11101000;
 3f6:	88 b3       	in	r24, 0x18	; 24
 3f8:	88 7e       	andi	r24, 0xE8	; 232
 3fa:	88 bb       	out	0x18, r24	; 24
	
	
	SET_BIT(DDRB,6);
 3fc:	87 b3       	in	r24, 0x17	; 23
 3fe:	80 64       	ori	r24, 0x40	; 64
 400:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,5);
 402:	87 b3       	in	r24, 0x17	; 23
 404:	80 62       	ori	r24, 0x20	; 32
 406:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRA,2);
 408:	8a b3       	in	r24, 0x1a	; 26
 40a:	84 60       	ori	r24, 0x04	; 4
 40c:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,3);
 40e:	8a b3       	in	r24, 0x1a	; 26
 410:	88 60       	ori	r24, 0x08	; 8
 412:	8a bb       	out	0x1a, r24	; 26
 414:	08 95       	ret

00000416 <SEVENSEG_display>:
}


void SEVENSEG_display(int digit)
{
	PORTB &= 0b11101000;
 416:	28 b3       	in	r18, 0x18	; 24
 418:	28 7e       	andi	r18, 0xE8	; 232
 41a:	28 bb       	out	0x18, r18	; 24
	PORTB |= (((digit & 0b00001000)<<1)|(digit & 0b00000111));
 41c:	48 b3       	in	r20, 0x18	; 24
 41e:	9c 01       	movw	r18, r24
 420:	28 70       	andi	r18, 0x08	; 8
 422:	33 27       	eor	r19, r19
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	87 70       	andi	r24, 0x07	; 7
 42a:	28 2b       	or	r18, r24
 42c:	24 2b       	or	r18, r20
 42e:	28 bb       	out	0x18, r18	; 24
 430:	08 95       	ret

00000432 <disply_number>:
}

void disply_number(int number)
{
 432:	af 92       	push	r10
 434:	bf 92       	push	r11
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	fc 01       	movw	r30, r24
	int digit4 = ( number / 1000) % 10;
 448:	68 ee       	ldi	r22, 0xE8	; 232
 44a:	73 e0       	ldi	r23, 0x03	; 3
 44c:	0e 94 91 03 	call	0x722	; 0x722 <__divmodhi4>
 450:	cb 01       	movw	r24, r22
 452:	2a e0       	ldi	r18, 0x0A	; 10
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	b9 01       	movw	r22, r18
 458:	0e 94 91 03 	call	0x722	; 0x722 <__divmodhi4>
 45c:	7c 01       	movw	r14, r24
	int digit3 = ( number / 100) % 10;
 45e:	cf 01       	movw	r24, r30
 460:	64 e6       	ldi	r22, 0x64	; 100
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	0e 94 91 03 	call	0x722	; 0x722 <__divmodhi4>
 468:	cb 01       	movw	r24, r22
 46a:	b9 01       	movw	r22, r18
 46c:	0e 94 91 03 	call	0x722	; 0x722 <__divmodhi4>
 470:	8c 01       	movw	r16, r24
	int digit2 = ( number / 10) % 10;
 472:	cf 01       	movw	r24, r30
 474:	b9 01       	movw	r22, r18
 476:	0e 94 91 03 	call	0x722	; 0x722 <__divmodhi4>
 47a:	a8 2e       	mov	r10, r24
 47c:	b9 2e       	mov	r11, r25
 47e:	cb 01       	movw	r24, r22
 480:	b9 01       	movw	r22, r18
 482:	0e 94 91 03 	call	0x722	; 0x722 <__divmodhi4>
 486:	ec 01       	movw	r28, r24
	int digit1 =  (number/ 1 ) % 10;

	// Display the digits on the four-digit seven-segment display
	uint16_t start_time = 0;
 488:	c1 2c       	mov	r12, r1
 48a:	d1 2c       	mov	r13, r1
	while (start_time < 1000) // Delay for 1 seconds
 48c:	38 c0       	rjmp	.+112    	; 0x4fe <disply_number+0xcc>
	{
		
		SEVENSEG_display(digit4);
 48e:	c7 01       	movw	r24, r14
 490:	0e 94 0b 02 	call	0x416	; 0x416 <SEVENSEG_display>
 494:	83 ef       	ldi	r24, 0xF3	; 243
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <disply_number+0x66>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <disply_number+0x6c>
 49e:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTB,6);
 4a0:	88 b3       	in	r24, 0x18	; 24
 4a2:	20 e4       	ldi	r18, 0x40	; 64
 4a4:	28 27       	eor	r18, r24
 4a6:	28 bb       	out	0x18, r18	; 24
		SEVENSEG_display(digit3);
 4a8:	c8 01       	movw	r24, r16
 4aa:	0e 94 0b 02 	call	0x416	; 0x416 <SEVENSEG_display>
 4ae:	83 ef       	ldi	r24, 0xF3	; 243
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <disply_number+0x80>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <disply_number+0x86>
 4b8:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTB,5);
 4ba:	88 b3       	in	r24, 0x18	; 24
 4bc:	20 e2       	ldi	r18, 0x20	; 32
 4be:	28 27       	eor	r18, r24
 4c0:	28 bb       	out	0x18, r18	; 24
		SEVENSEG_display(digit2);
 4c2:	ce 01       	movw	r24, r28
 4c4:	0e 94 0b 02 	call	0x416	; 0x416 <SEVENSEG_display>
 4c8:	83 ef       	ldi	r24, 0xF3	; 243
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <disply_number+0x9a>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <disply_number+0xa0>
 4d2:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTA,2);
 4d4:	8b b3       	in	r24, 0x1b	; 27
 4d6:	24 e0       	ldi	r18, 0x04	; 4
 4d8:	28 27       	eor	r18, r24
 4da:	2b bb       	out	0x1b, r18	; 27
		SEVENSEG_display(digit1);
 4dc:	8a 2d       	mov	r24, r10
 4de:	9b 2d       	mov	r25, r11
 4e0:	0e 94 0b 02 	call	0x416	; 0x416 <SEVENSEG_display>
 4e4:	83 ef       	ldi	r24, 0xF3	; 243
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <disply_number+0xb6>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <disply_number+0xbc>
 4ee:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTA,3);
 4f0:	8b b3       	in	r24, 0x1b	; 27
 4f2:	28 e0       	ldi	r18, 0x08	; 8
 4f4:	28 27       	eor	r18, r24
 4f6:	2b bb       	out	0x1b, r18	; 27
		
		start_time+=5;
 4f8:	95 e0       	ldi	r25, 0x05	; 5
 4fa:	c9 0e       	add	r12, r25
 4fc:	d1 1c       	adc	r13, r1
	int digit2 = ( number / 10) % 10;
	int digit1 =  (number/ 1 ) % 10;

	// Display the digits on the four-digit seven-segment display
	uint16_t start_time = 0;
	while (start_time < 1000) // Delay for 1 seconds
 4fe:	88 ee       	ldi	r24, 0xE8	; 232
 500:	c8 16       	cp	r12, r24
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	d8 06       	cpc	r13, r24
 506:	18 f2       	brcs	.-122    	; 0x48e <disply_number+0x5c>
		
		start_time+=5;

		
	}
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	ff 90       	pop	r15
 512:	ef 90       	pop	r14
 514:	df 90       	pop	r13
 516:	cf 90       	pop	r12
 518:	bf 90       	pop	r11
 51a:	af 90       	pop	r10
 51c:	08 95       	ret

0000051e <sort_init>:
#include "sorting.h"

void sort_init()
{
	for (int i = 0; i < Size; i++)
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	08 c0       	rjmp	.+16     	; 0x534 <sort_init+0x16>
	{
		numbers[i] = 0;
 524:	fc 01       	movw	r30, r24
 526:	ee 0f       	add	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	e8 57       	subi	r30, 0x78	; 120
 52c:	ff 4f       	sbci	r31, 0xFF	; 255
 52e:	11 82       	std	Z+1, r1	; 0x01
 530:	10 82       	st	Z, r1
#include "sorting.h"

void sort_init()
{
	for (int i = 0; i < Size; i++)
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	84 36       	cpi	r24, 0x64	; 100
 536:	91 05       	cpc	r25, r1
 538:	ac f3       	brlt	.-22     	; 0x524 <sort_init+0x6>
	{
		numbers[i] = 0;
	}
	pos = 0;
 53a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__data_end+0x1>
 53e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
 542:	08 95       	ret

00000544 <input_numbers>:
}

void input_numbers()
{
 544:	cf 93       	push	r28
	LCD_string("Enter numbers: ");
 546:	80 e7       	ldi	r24, 0x70	; 112
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_string>
	LCD_gotoxy(1, 0);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_gotoxy>
	while (1)
	{
		char key = keypad_get_value();
 556:	0e 94 6e 00 	call	0xdc	; 0xdc <keypad_get_value>
 55a:	c8 2f       	mov	r28, r24
		if (key >= '0' && key <= '9')
 55c:	80 ed       	ldi	r24, 0xD0	; 208
 55e:	8c 0f       	add	r24, r28
 560:	8a 30       	cpi	r24, 0x0A	; 10
 562:	f0 f4       	brcc	.+60     	; 0x5a0 <input_numbers+0x5c>
		{
			LCD_char(key);
 564:	8c 2f       	mov	r24, r28
 566:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_char>
			numbers[pos] = numbers[pos] * 10 + key - '0';
 56a:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <__data_end>
 56e:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <__data_end+0x1>
 572:	ee 0f       	add	r30, r30
 574:	ff 1f       	adc	r31, r31
 576:	e8 57       	subi	r30, 0x78	; 120
 578:	ff 4f       	sbci	r31, 0xFF	; 255
 57a:	80 81       	ld	r24, Z
 57c:	91 81       	ldd	r25, Z+1	; 0x01
 57e:	9c 01       	movw	r18, r24
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	82 0f       	add	r24, r18
 592:	93 1f       	adc	r25, r19
 594:	8c 0f       	add	r24, r28
 596:	91 1d       	adc	r25, r1
 598:	c0 97       	sbiw	r24, 0x30	; 48
 59a:	91 83       	std	Z+1, r25	; 0x01
 59c:	80 83       	st	Z, r24
 59e:	1c c0       	rjmp	.+56     	; 0x5d8 <input_numbers+0x94>
		}
		else if (key == '=')
 5a0:	cd 33       	cpi	r28, 0x3D	; 61
 5a2:	71 f4       	brne	.+28     	; 0x5c0 <input_numbers+0x7c>
		{
			LCD_string(", ");
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_string>
			pos++;
 5ac:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 5b0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0x1>
 5ba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 5be:	0c c0       	rjmp	.+24     	; 0x5d8 <input_numbers+0x94>
		}
		else if (key == 'C')
 5c0:	c3 34       	cpi	r28, 0x43	; 67
 5c2:	51 f4       	brne	.+20     	; 0x5d8 <input_numbers+0x94>
		{
			pos++;
 5c4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 5c8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0x1>
 5d2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
			return;
 5d6:	0a c0       	rjmp	.+20     	; 0x5ec <input_numbers+0xa8>
 5d8:	2f ef       	ldi	r18, 0xFF	; 255
 5da:	83 ec       	ldi	r24, 0xC3	; 195
 5dc:	99 e0       	ldi	r25, 0x09	; 9
 5de:	21 50       	subi	r18, 0x01	; 1
 5e0:	80 40       	sbci	r24, 0x00	; 0
 5e2:	90 40       	sbci	r25, 0x00	; 0
 5e4:	e1 f7       	brne	.-8      	; 0x5de <input_numbers+0x9a>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <input_numbers+0xa4>
 5e8:	00 00       	nop
 5ea:	b5 cf       	rjmp	.-150    	; 0x556 <input_numbers+0x12>
		}
		_delay_ms(200);
	}
}
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <sort>:

void sort()
{
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
	for (int i = 0; i < pos; i++)
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	28 c0       	rjmp	.+80     	; 0x64a <sort+0x5a>
	{
		for (int j = i + 1; j < pos; j++)
 5fa:	eb 01       	movw	r28, r22
 5fc:	21 96       	adiw	r28, 0x01	; 1
 5fe:	ce 01       	movw	r24, r28
 600:	20 c0       	rjmp	.+64     	; 0x642 <sort+0x52>
		{
			if (numbers[i] > numbers[j])
 602:	fb 01       	movw	r30, r22
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	e8 57       	subi	r30, 0x78	; 120
 60a:	ff 4f       	sbci	r31, 0xFF	; 255
 60c:	20 81       	ld	r18, Z
 60e:	31 81       	ldd	r19, Z+1	; 0x01
 610:	fc 01       	movw	r30, r24
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	e8 57       	subi	r30, 0x78	; 120
 618:	ff 4f       	sbci	r31, 0xFF	; 255
 61a:	40 81       	ld	r20, Z
 61c:	51 81       	ldd	r21, Z+1	; 0x01
 61e:	42 17       	cp	r20, r18
 620:	53 07       	cpc	r21, r19
 622:	74 f4       	brge	.+28     	; 0x640 <sort+0x50>
			{
				int temp = numbers[i];
				numbers[i] = numbers[j];
 624:	fb 01       	movw	r30, r22
 626:	ee 0f       	add	r30, r30
 628:	ff 1f       	adc	r31, r31
 62a:	e8 57       	subi	r30, 0x78	; 120
 62c:	ff 4f       	sbci	r31, 0xFF	; 255
 62e:	51 83       	std	Z+1, r21	; 0x01
 630:	40 83       	st	Z, r20
				numbers[j] = temp;
 632:	fc 01       	movw	r30, r24
 634:	ee 0f       	add	r30, r30
 636:	ff 1f       	adc	r31, r31
 638:	e8 57       	subi	r30, 0x78	; 120
 63a:	ff 4f       	sbci	r31, 0xFF	; 255
 63c:	31 83       	std	Z+1, r19	; 0x01
 63e:	20 83       	st	Z, r18

void sort()
{
	for (int i = 0; i < pos; i++)
	{
		for (int j = i + 1; j < pos; j++)
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	8a 17       	cp	r24, r26
 644:	9b 07       	cpc	r25, r27
 646:	ec f2       	brlt	.-70     	; 0x602 <sort+0x12>
	}
}

void sort()
{
	for (int i = 0; i < pos; i++)
 648:	be 01       	movw	r22, r28
 64a:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__data_end>
 64e:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__data_end+0x1>
 652:	6a 17       	cp	r22, r26
 654:	7b 07       	cpc	r23, r27
 656:	8c f2       	brlt	.-94     	; 0x5fa <sort+0xa>
				numbers[i] = numbers[j];
				numbers[j] = temp;
			}
		}
	}
}
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <display_numbers>:

void display_numbers()
{
 65e:	ef 92       	push	r14
 660:	ff 92       	push	r15
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	00 d0       	rcall	.+0      	; 0x66c <display_numbers+0xe>
 66c:	00 d0       	rcall	.+0      	; 0x66e <display_numbers+0x10>
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
	LCD_clear();
 672:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_clear>
	for (int i = 0; i < pos; i++)
 676:	00 e0       	ldi	r16, 0x00	; 0
 678:	10 e0       	ldi	r17, 0x00	; 0
 67a:	23 c0       	rjmp	.+70     	; 0x6c2 <display_numbers+0x64>
	{
		char str[4];
		sprintf(str, "%d", numbers[i]);
 67c:	f8 01       	movw	r30, r16
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	e8 57       	subi	r30, 0x78	; 120
 684:	ff 4f       	sbci	r31, 0xFF	; 255
 686:	81 81       	ldd	r24, Z+1	; 0x01
 688:	8f 93       	push	r24
 68a:	80 81       	ld	r24, Z
 68c:	8f 93       	push	r24
 68e:	83 e8       	ldi	r24, 0x83	; 131
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	9f 93       	push	r25
 694:	8f 93       	push	r24
 696:	ce 01       	movw	r24, r28
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	7c 01       	movw	r14, r24
 69c:	9f 93       	push	r25
 69e:	8f 93       	push	r24
 6a0:	0e 94 b9 03 	call	0x772	; 0x772 <sprintf>
		LCD_string(str);
 6a4:	c7 01       	movw	r24, r14
 6a6:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_string>
		LCD_string(", ");
 6aa:	80 e8       	ldi	r24, 0x80	; 128
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_string>
}

void display_numbers()
{
	LCD_clear();
	for (int i = 0; i < pos; i++)
 6b2:	0f 5f       	subi	r16, 0xFF	; 255
 6b4:	1f 4f       	sbci	r17, 0xFF	; 255
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 6c6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 6ca:	08 17       	cp	r16, r24
 6cc:	19 07       	cpc	r17, r25
 6ce:	b4 f2       	brlt	.-84     	; 0x67c <display_numbers+0x1e>
 6d0:	00 e0       	ldi	r16, 0x00	; 0
 6d2:	10 e0       	ldi	r17, 0x00	; 0
 6d4:	14 c0       	rjmp	.+40     	; 0x6fe <display_numbers+0xa0>
		LCD_string(str);
		LCD_string(", ");
	}	
	for (int i = 0; i < pos; i++)
	{
		disply_number(numbers[i]);
 6d6:	f8 01       	movw	r30, r16
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	e8 57       	subi	r30, 0x78	; 120
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	80 81       	ld	r24, Z
 6e2:	91 81       	ldd	r25, Z+1	; 0x01
 6e4:	0e 94 19 02 	call	0x432	; 0x432 <disply_number>
 6e8:	9f ef       	ldi	r25, 0xFF	; 255
 6ea:	25 ea       	ldi	r18, 0xA5	; 165
 6ec:	8e e0       	ldi	r24, 0x0E	; 14
 6ee:	91 50       	subi	r25, 0x01	; 1
 6f0:	20 40       	sbci	r18, 0x00	; 0
 6f2:	80 40       	sbci	r24, 0x00	; 0
 6f4:	e1 f7       	brne	.-8      	; 0x6ee <display_numbers+0x90>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <display_numbers+0x9a>
 6f8:	00 00       	nop
		char str[4];
		sprintf(str, "%d", numbers[i]);
		LCD_string(str);
		LCD_string(", ");
	}	
	for (int i = 0; i < pos; i++)
 6fa:	0f 5f       	subi	r16, 0xFF	; 255
 6fc:	1f 4f       	sbci	r17, 0xFF	; 255
 6fe:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 702:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 706:	08 17       	cp	r16, r24
 708:	19 07       	cpc	r17, r25
 70a:	2c f3       	brlt	.-54     	; 0x6d6 <display_numbers+0x78>
	{
		disply_number(numbers[i]);
		_delay_ms(300);
	}
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	ff 90       	pop	r15
 71e:	ef 90       	pop	r14
 720:	08 95       	ret

00000722 <__divmodhi4>:
 722:	97 fb       	bst	r25, 7
 724:	07 2e       	mov	r0, r23
 726:	16 f4       	brtc	.+4      	; 0x72c <__divmodhi4+0xa>
 728:	00 94       	com	r0
 72a:	07 d0       	rcall	.+14     	; 0x73a <__divmodhi4_neg1>
 72c:	77 fd       	sbrc	r23, 7
 72e:	09 d0       	rcall	.+18     	; 0x742 <__divmodhi4_neg2>
 730:	0e 94 a5 03 	call	0x74a	; 0x74a <__udivmodhi4>
 734:	07 fc       	sbrc	r0, 7
 736:	05 d0       	rcall	.+10     	; 0x742 <__divmodhi4_neg2>
 738:	3e f4       	brtc	.+14     	; 0x748 <__divmodhi4_exit>

0000073a <__divmodhi4_neg1>:
 73a:	90 95       	com	r25
 73c:	81 95       	neg	r24
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	08 95       	ret

00000742 <__divmodhi4_neg2>:
 742:	70 95       	com	r23
 744:	61 95       	neg	r22
 746:	7f 4f       	sbci	r23, 0xFF	; 255

00000748 <__divmodhi4_exit>:
 748:	08 95       	ret

0000074a <__udivmodhi4>:
 74a:	aa 1b       	sub	r26, r26
 74c:	bb 1b       	sub	r27, r27
 74e:	51 e1       	ldi	r21, 0x11	; 17
 750:	07 c0       	rjmp	.+14     	; 0x760 <__udivmodhi4_ep>

00000752 <__udivmodhi4_loop>:
 752:	aa 1f       	adc	r26, r26
 754:	bb 1f       	adc	r27, r27
 756:	a6 17       	cp	r26, r22
 758:	b7 07       	cpc	r27, r23
 75a:	10 f0       	brcs	.+4      	; 0x760 <__udivmodhi4_ep>
 75c:	a6 1b       	sub	r26, r22
 75e:	b7 0b       	sbc	r27, r23

00000760 <__udivmodhi4_ep>:
 760:	88 1f       	adc	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	5a 95       	dec	r21
 766:	a9 f7       	brne	.-22     	; 0x752 <__udivmodhi4_loop>
 768:	80 95       	com	r24
 76a:	90 95       	com	r25
 76c:	bc 01       	movw	r22, r24
 76e:	cd 01       	movw	r24, r26
 770:	08 95       	ret

00000772 <sprintf>:
 772:	ae e0       	ldi	r26, 0x0E	; 14
 774:	b0 e0       	ldi	r27, 0x00	; 0
 776:	ef eb       	ldi	r30, 0xBF	; 191
 778:	f3 e0       	ldi	r31, 0x03	; 3
 77a:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__prologue_saves__+0x1c>
 77e:	0d 89       	ldd	r16, Y+21	; 0x15
 780:	1e 89       	ldd	r17, Y+22	; 0x16
 782:	86 e0       	ldi	r24, 0x06	; 6
 784:	8c 83       	std	Y+4, r24	; 0x04
 786:	1a 83       	std	Y+2, r17	; 0x02
 788:	09 83       	std	Y+1, r16	; 0x01
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	9f e7       	ldi	r25, 0x7F	; 127
 78e:	9e 83       	std	Y+6, r25	; 0x06
 790:	8d 83       	std	Y+5, r24	; 0x05
 792:	ae 01       	movw	r20, r28
 794:	47 5e       	subi	r20, 0xE7	; 231
 796:	5f 4f       	sbci	r21, 0xFF	; 255
 798:	6f 89       	ldd	r22, Y+23	; 0x17
 79a:	78 8d       	ldd	r23, Y+24	; 0x18
 79c:	ce 01       	movw	r24, r28
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <vfprintf>
 7a4:	ef 81       	ldd	r30, Y+7	; 0x07
 7a6:	f8 85       	ldd	r31, Y+8	; 0x08
 7a8:	e0 0f       	add	r30, r16
 7aa:	f1 1f       	adc	r31, r17
 7ac:	10 82       	st	Z, r1
 7ae:	2e 96       	adiw	r28, 0x0e	; 14
 7b0:	e4 e0       	ldi	r30, 0x04	; 4
 7b2:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__epilogue_restores__+0x1c>

000007b6 <vfprintf>:
 7b6:	ab e0       	ldi	r26, 0x0B	; 11
 7b8:	b0 e0       	ldi	r27, 0x00	; 0
 7ba:	e1 ee       	ldi	r30, 0xE1	; 225
 7bc:	f3 e0       	ldi	r31, 0x03	; 3
 7be:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__prologue_saves__>
 7c2:	6c 01       	movw	r12, r24
 7c4:	7b 01       	movw	r14, r22
 7c6:	8a 01       	movw	r16, r20
 7c8:	fc 01       	movw	r30, r24
 7ca:	17 82       	std	Z+7, r1	; 0x07
 7cc:	16 82       	std	Z+6, r1	; 0x06
 7ce:	83 81       	ldd	r24, Z+3	; 0x03
 7d0:	81 ff       	sbrs	r24, 1
 7d2:	cc c1       	rjmp	.+920    	; 0xb6c <__stack+0x30d>
 7d4:	ce 01       	movw	r24, r28
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	3c 01       	movw	r6, r24
 7da:	f6 01       	movw	r30, r12
 7dc:	93 81       	ldd	r25, Z+3	; 0x03
 7de:	f7 01       	movw	r30, r14
 7e0:	93 fd       	sbrc	r25, 3
 7e2:	85 91       	lpm	r24, Z+
 7e4:	93 ff       	sbrs	r25, 3
 7e6:	81 91       	ld	r24, Z+
 7e8:	7f 01       	movw	r14, r30
 7ea:	88 23       	and	r24, r24
 7ec:	09 f4       	brne	.+2      	; 0x7f0 <vfprintf+0x3a>
 7ee:	ba c1       	rjmp	.+884    	; 0xb64 <__stack+0x305>
 7f0:	85 32       	cpi	r24, 0x25	; 37
 7f2:	39 f4       	brne	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f4:	93 fd       	sbrc	r25, 3
 7f6:	85 91       	lpm	r24, Z+
 7f8:	93 ff       	sbrs	r25, 3
 7fa:	81 91       	ld	r24, Z+
 7fc:	7f 01       	movw	r14, r30
 7fe:	85 32       	cpi	r24, 0x25	; 37
 800:	29 f4       	brne	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 802:	b6 01       	movw	r22, r12
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 d2 05 	call	0xba4	; 0xba4 <fputc>
 80a:	e7 cf       	rjmp	.-50     	; 0x7da <vfprintf+0x24>
 80c:	91 2c       	mov	r9, r1
 80e:	21 2c       	mov	r2, r1
 810:	31 2c       	mov	r3, r1
 812:	ff e1       	ldi	r31, 0x1F	; 31
 814:	f3 15       	cp	r31, r3
 816:	d8 f0       	brcs	.+54     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 818:	8b 32       	cpi	r24, 0x2B	; 43
 81a:	79 f0       	breq	.+30     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 81c:	38 f4       	brcc	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81e:	80 32       	cpi	r24, 0x20	; 32
 820:	79 f0       	breq	.+30     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 822:	83 32       	cpi	r24, 0x23	; 35
 824:	a1 f4       	brne	.+40     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 826:	23 2d       	mov	r18, r3
 828:	20 61       	ori	r18, 0x10	; 16
 82a:	1d c0       	rjmp	.+58     	; 0x866 <__stack+0x7>
 82c:	8d 32       	cpi	r24, 0x2D	; 45
 82e:	61 f0       	breq	.+24     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 830:	80 33       	cpi	r24, 0x30	; 48
 832:	69 f4       	brne	.+26     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 834:	23 2d       	mov	r18, r3
 836:	21 60       	ori	r18, 0x01	; 1
 838:	16 c0       	rjmp	.+44     	; 0x866 <__stack+0x7>
 83a:	83 2d       	mov	r24, r3
 83c:	82 60       	ori	r24, 0x02	; 2
 83e:	38 2e       	mov	r3, r24
 840:	e3 2d       	mov	r30, r3
 842:	e4 60       	ori	r30, 0x04	; 4
 844:	3e 2e       	mov	r3, r30
 846:	2a c0       	rjmp	.+84     	; 0x89c <__stack+0x3d>
 848:	f3 2d       	mov	r31, r3
 84a:	f8 60       	ori	r31, 0x08	; 8
 84c:	1d c0       	rjmp	.+58     	; 0x888 <__stack+0x29>
 84e:	37 fc       	sbrc	r3, 7
 850:	2d c0       	rjmp	.+90     	; 0x8ac <__stack+0x4d>
 852:	20 ed       	ldi	r18, 0xD0	; 208
 854:	28 0f       	add	r18, r24
 856:	2a 30       	cpi	r18, 0x0A	; 10
 858:	40 f0       	brcs	.+16     	; 0x86a <__stack+0xb>
 85a:	8e 32       	cpi	r24, 0x2E	; 46
 85c:	b9 f4       	brne	.+46     	; 0x88c <__stack+0x2d>
 85e:	36 fc       	sbrc	r3, 6
 860:	81 c1       	rjmp	.+770    	; 0xb64 <__stack+0x305>
 862:	23 2d       	mov	r18, r3
 864:	20 64       	ori	r18, 0x40	; 64
 866:	32 2e       	mov	r3, r18
 868:	19 c0       	rjmp	.+50     	; 0x89c <__stack+0x3d>
 86a:	36 fe       	sbrs	r3, 6
 86c:	06 c0       	rjmp	.+12     	; 0x87a <__stack+0x1b>
 86e:	8a e0       	ldi	r24, 0x0A	; 10
 870:	98 9e       	mul	r9, r24
 872:	20 0d       	add	r18, r0
 874:	11 24       	eor	r1, r1
 876:	92 2e       	mov	r9, r18
 878:	11 c0       	rjmp	.+34     	; 0x89c <__stack+0x3d>
 87a:	ea e0       	ldi	r30, 0x0A	; 10
 87c:	2e 9e       	mul	r2, r30
 87e:	20 0d       	add	r18, r0
 880:	11 24       	eor	r1, r1
 882:	22 2e       	mov	r2, r18
 884:	f3 2d       	mov	r31, r3
 886:	f0 62       	ori	r31, 0x20	; 32
 888:	3f 2e       	mov	r3, r31
 88a:	08 c0       	rjmp	.+16     	; 0x89c <__stack+0x3d>
 88c:	8c 36       	cpi	r24, 0x6C	; 108
 88e:	21 f4       	brne	.+8      	; 0x898 <__stack+0x39>
 890:	83 2d       	mov	r24, r3
 892:	80 68       	ori	r24, 0x80	; 128
 894:	38 2e       	mov	r3, r24
 896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
 898:	88 36       	cpi	r24, 0x68	; 104
 89a:	41 f4       	brne	.+16     	; 0x8ac <__stack+0x4d>
 89c:	f7 01       	movw	r30, r14
 89e:	93 fd       	sbrc	r25, 3
 8a0:	85 91       	lpm	r24, Z+
 8a2:	93 ff       	sbrs	r25, 3
 8a4:	81 91       	ld	r24, Z+
 8a6:	7f 01       	movw	r14, r30
 8a8:	81 11       	cpse	r24, r1
 8aa:	b3 cf       	rjmp	.-154    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 8ac:	98 2f       	mov	r25, r24
 8ae:	9f 7d       	andi	r25, 0xDF	; 223
 8b0:	95 54       	subi	r25, 0x45	; 69
 8b2:	93 30       	cpi	r25, 0x03	; 3
 8b4:	28 f4       	brcc	.+10     	; 0x8c0 <__stack+0x61>
 8b6:	0c 5f       	subi	r16, 0xFC	; 252
 8b8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ba:	9f e3       	ldi	r25, 0x3F	; 63
 8bc:	99 83       	std	Y+1, r25	; 0x01
 8be:	0d c0       	rjmp	.+26     	; 0x8da <__stack+0x7b>
 8c0:	83 36       	cpi	r24, 0x63	; 99
 8c2:	31 f0       	breq	.+12     	; 0x8d0 <__stack+0x71>
 8c4:	83 37       	cpi	r24, 0x73	; 115
 8c6:	71 f0       	breq	.+28     	; 0x8e4 <__stack+0x85>
 8c8:	83 35       	cpi	r24, 0x53	; 83
 8ca:	09 f0       	breq	.+2      	; 0x8ce <__stack+0x6f>
 8cc:	59 c0       	rjmp	.+178    	; 0x980 <__stack+0x121>
 8ce:	21 c0       	rjmp	.+66     	; 0x912 <__stack+0xb3>
 8d0:	f8 01       	movw	r30, r16
 8d2:	80 81       	ld	r24, Z
 8d4:	89 83       	std	Y+1, r24	; 0x01
 8d6:	0e 5f       	subi	r16, 0xFE	; 254
 8d8:	1f 4f       	sbci	r17, 0xFF	; 255
 8da:	88 24       	eor	r8, r8
 8dc:	83 94       	inc	r8
 8de:	91 2c       	mov	r9, r1
 8e0:	53 01       	movw	r10, r6
 8e2:	13 c0       	rjmp	.+38     	; 0x90a <__stack+0xab>
 8e4:	28 01       	movw	r4, r16
 8e6:	f2 e0       	ldi	r31, 0x02	; 2
 8e8:	4f 0e       	add	r4, r31
 8ea:	51 1c       	adc	r5, r1
 8ec:	f8 01       	movw	r30, r16
 8ee:	a0 80       	ld	r10, Z
 8f0:	b1 80       	ldd	r11, Z+1	; 0x01
 8f2:	36 fe       	sbrs	r3, 6
 8f4:	03 c0       	rjmp	.+6      	; 0x8fc <__stack+0x9d>
 8f6:	69 2d       	mov	r22, r9
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0xa1>
 8fc:	6f ef       	ldi	r22, 0xFF	; 255
 8fe:	7f ef       	ldi	r23, 0xFF	; 255
 900:	c5 01       	movw	r24, r10
 902:	0e 94 c7 05 	call	0xb8e	; 0xb8e <strnlen>
 906:	4c 01       	movw	r8, r24
 908:	82 01       	movw	r16, r4
 90a:	f3 2d       	mov	r31, r3
 90c:	ff 77       	andi	r31, 0x7F	; 127
 90e:	3f 2e       	mov	r3, r31
 910:	16 c0       	rjmp	.+44     	; 0x93e <__stack+0xdf>
 912:	28 01       	movw	r4, r16
 914:	22 e0       	ldi	r18, 0x02	; 2
 916:	42 0e       	add	r4, r18
 918:	51 1c       	adc	r5, r1
 91a:	f8 01       	movw	r30, r16
 91c:	a0 80       	ld	r10, Z
 91e:	b1 80       	ldd	r11, Z+1	; 0x01
 920:	36 fe       	sbrs	r3, 6
 922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0xcb>
 924:	69 2d       	mov	r22, r9
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0xcf>
 92a:	6f ef       	ldi	r22, 0xFF	; 255
 92c:	7f ef       	ldi	r23, 0xFF	; 255
 92e:	c5 01       	movw	r24, r10
 930:	0e 94 bc 05 	call	0xb78	; 0xb78 <strnlen_P>
 934:	4c 01       	movw	r8, r24
 936:	f3 2d       	mov	r31, r3
 938:	f0 68       	ori	r31, 0x80	; 128
 93a:	3f 2e       	mov	r3, r31
 93c:	82 01       	movw	r16, r4
 93e:	33 fc       	sbrc	r3, 3
 940:	1b c0       	rjmp	.+54     	; 0x978 <__stack+0x119>
 942:	82 2d       	mov	r24, r2
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	88 16       	cp	r8, r24
 948:	99 06       	cpc	r9, r25
 94a:	b0 f4       	brcc	.+44     	; 0x978 <__stack+0x119>
 94c:	b6 01       	movw	r22, r12
 94e:	80 e2       	ldi	r24, 0x20	; 32
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 d2 05 	call	0xba4	; 0xba4 <fputc>
 956:	2a 94       	dec	r2
 958:	f4 cf       	rjmp	.-24     	; 0x942 <__stack+0xe3>
 95a:	f5 01       	movw	r30, r10
 95c:	37 fc       	sbrc	r3, 7
 95e:	85 91       	lpm	r24, Z+
 960:	37 fe       	sbrs	r3, 7
 962:	81 91       	ld	r24, Z+
 964:	5f 01       	movw	r10, r30
 966:	b6 01       	movw	r22, r12
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 d2 05 	call	0xba4	; 0xba4 <fputc>
 96e:	21 10       	cpse	r2, r1
 970:	2a 94       	dec	r2
 972:	21 e0       	ldi	r18, 0x01	; 1
 974:	82 1a       	sub	r8, r18
 976:	91 08       	sbc	r9, r1
 978:	81 14       	cp	r8, r1
 97a:	91 04       	cpc	r9, r1
 97c:	71 f7       	brne	.-36     	; 0x95a <__stack+0xfb>
 97e:	e8 c0       	rjmp	.+464    	; 0xb50 <__stack+0x2f1>
 980:	84 36       	cpi	r24, 0x64	; 100
 982:	11 f0       	breq	.+4      	; 0x988 <__stack+0x129>
 984:	89 36       	cpi	r24, 0x69	; 105
 986:	41 f5       	brne	.+80     	; 0x9d8 <__stack+0x179>
 988:	f8 01       	movw	r30, r16
 98a:	37 fe       	sbrs	r3, 7
 98c:	07 c0       	rjmp	.+14     	; 0x99c <__stack+0x13d>
 98e:	60 81       	ld	r22, Z
 990:	71 81       	ldd	r23, Z+1	; 0x01
 992:	82 81       	ldd	r24, Z+2	; 0x02
 994:	93 81       	ldd	r25, Z+3	; 0x03
 996:	0c 5f       	subi	r16, 0xFC	; 252
 998:	1f 4f       	sbci	r17, 0xFF	; 255
 99a:	08 c0       	rjmp	.+16     	; 0x9ac <__stack+0x14d>
 99c:	60 81       	ld	r22, Z
 99e:	71 81       	ldd	r23, Z+1	; 0x01
 9a0:	07 2e       	mov	r0, r23
 9a2:	00 0c       	add	r0, r0
 9a4:	88 0b       	sbc	r24, r24
 9a6:	99 0b       	sbc	r25, r25
 9a8:	0e 5f       	subi	r16, 0xFE	; 254
 9aa:	1f 4f       	sbci	r17, 0xFF	; 255
 9ac:	f3 2d       	mov	r31, r3
 9ae:	ff 76       	andi	r31, 0x6F	; 111
 9b0:	3f 2e       	mov	r3, r31
 9b2:	97 ff       	sbrs	r25, 7
 9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <__stack+0x169>
 9b6:	90 95       	com	r25
 9b8:	80 95       	com	r24
 9ba:	70 95       	com	r23
 9bc:	61 95       	neg	r22
 9be:	7f 4f       	sbci	r23, 0xFF	; 255
 9c0:	8f 4f       	sbci	r24, 0xFF	; 255
 9c2:	9f 4f       	sbci	r25, 0xFF	; 255
 9c4:	f0 68       	ori	r31, 0x80	; 128
 9c6:	3f 2e       	mov	r3, r31
 9c8:	2a e0       	ldi	r18, 0x0A	; 10
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	a3 01       	movw	r20, r6
 9ce:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__ultoa_invert>
 9d2:	88 2e       	mov	r8, r24
 9d4:	86 18       	sub	r8, r6
 9d6:	45 c0       	rjmp	.+138    	; 0xa62 <__stack+0x203>
 9d8:	85 37       	cpi	r24, 0x75	; 117
 9da:	31 f4       	brne	.+12     	; 0x9e8 <__stack+0x189>
 9dc:	23 2d       	mov	r18, r3
 9de:	2f 7e       	andi	r18, 0xEF	; 239
 9e0:	b2 2e       	mov	r11, r18
 9e2:	2a e0       	ldi	r18, 0x0A	; 10
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	25 c0       	rjmp	.+74     	; 0xa32 <__stack+0x1d3>
 9e8:	93 2d       	mov	r25, r3
 9ea:	99 7f       	andi	r25, 0xF9	; 249
 9ec:	b9 2e       	mov	r11, r25
 9ee:	8f 36       	cpi	r24, 0x6F	; 111
 9f0:	c1 f0       	breq	.+48     	; 0xa22 <__stack+0x1c3>
 9f2:	18 f4       	brcc	.+6      	; 0x9fa <__stack+0x19b>
 9f4:	88 35       	cpi	r24, 0x58	; 88
 9f6:	79 f0       	breq	.+30     	; 0xa16 <__stack+0x1b7>
 9f8:	b5 c0       	rjmp	.+362    	; 0xb64 <__stack+0x305>
 9fa:	80 37       	cpi	r24, 0x70	; 112
 9fc:	19 f0       	breq	.+6      	; 0xa04 <__stack+0x1a5>
 9fe:	88 37       	cpi	r24, 0x78	; 120
 a00:	21 f0       	breq	.+8      	; 0xa0a <__stack+0x1ab>
 a02:	b0 c0       	rjmp	.+352    	; 0xb64 <__stack+0x305>
 a04:	e9 2f       	mov	r30, r25
 a06:	e0 61       	ori	r30, 0x10	; 16
 a08:	be 2e       	mov	r11, r30
 a0a:	b4 fe       	sbrs	r11, 4
 a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__stack+0x1c9>
 a0e:	fb 2d       	mov	r31, r11
 a10:	f4 60       	ori	r31, 0x04	; 4
 a12:	bf 2e       	mov	r11, r31
 a14:	09 c0       	rjmp	.+18     	; 0xa28 <__stack+0x1c9>
 a16:	34 fe       	sbrs	r3, 4
 a18:	0a c0       	rjmp	.+20     	; 0xa2e <__stack+0x1cf>
 a1a:	29 2f       	mov	r18, r25
 a1c:	26 60       	ori	r18, 0x06	; 6
 a1e:	b2 2e       	mov	r11, r18
 a20:	06 c0       	rjmp	.+12     	; 0xa2e <__stack+0x1cf>
 a22:	28 e0       	ldi	r18, 0x08	; 8
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	05 c0       	rjmp	.+10     	; 0xa32 <__stack+0x1d3>
 a28:	20 e1       	ldi	r18, 0x10	; 16
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__stack+0x1d3>
 a2e:	20 e1       	ldi	r18, 0x10	; 16
 a30:	32 e0       	ldi	r19, 0x02	; 2
 a32:	f8 01       	movw	r30, r16
 a34:	b7 fe       	sbrs	r11, 7
 a36:	07 c0       	rjmp	.+14     	; 0xa46 <__stack+0x1e7>
 a38:	60 81       	ld	r22, Z
 a3a:	71 81       	ldd	r23, Z+1	; 0x01
 a3c:	82 81       	ldd	r24, Z+2	; 0x02
 a3e:	93 81       	ldd	r25, Z+3	; 0x03
 a40:	0c 5f       	subi	r16, 0xFC	; 252
 a42:	1f 4f       	sbci	r17, 0xFF	; 255
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <__stack+0x1f3>
 a46:	60 81       	ld	r22, Z
 a48:	71 81       	ldd	r23, Z+1	; 0x01
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0e 5f       	subi	r16, 0xFE	; 254
 a50:	1f 4f       	sbci	r17, 0xFF	; 255
 a52:	a3 01       	movw	r20, r6
 a54:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__ultoa_invert>
 a58:	88 2e       	mov	r8, r24
 a5a:	86 18       	sub	r8, r6
 a5c:	fb 2d       	mov	r31, r11
 a5e:	ff 77       	andi	r31, 0x7F	; 127
 a60:	3f 2e       	mov	r3, r31
 a62:	36 fe       	sbrs	r3, 6
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <__stack+0x221>
 a66:	23 2d       	mov	r18, r3
 a68:	2e 7f       	andi	r18, 0xFE	; 254
 a6a:	a2 2e       	mov	r10, r18
 a6c:	89 14       	cp	r8, r9
 a6e:	58 f4       	brcc	.+22     	; 0xa86 <__stack+0x227>
 a70:	34 fe       	sbrs	r3, 4
 a72:	0b c0       	rjmp	.+22     	; 0xa8a <__stack+0x22b>
 a74:	32 fc       	sbrc	r3, 2
 a76:	09 c0       	rjmp	.+18     	; 0xa8a <__stack+0x22b>
 a78:	83 2d       	mov	r24, r3
 a7a:	8e 7e       	andi	r24, 0xEE	; 238
 a7c:	a8 2e       	mov	r10, r24
 a7e:	05 c0       	rjmp	.+10     	; 0xa8a <__stack+0x22b>
 a80:	b8 2c       	mov	r11, r8
 a82:	a3 2c       	mov	r10, r3
 a84:	03 c0       	rjmp	.+6      	; 0xa8c <__stack+0x22d>
 a86:	b8 2c       	mov	r11, r8
 a88:	01 c0       	rjmp	.+2      	; 0xa8c <__stack+0x22d>
 a8a:	b9 2c       	mov	r11, r9
 a8c:	a4 fe       	sbrs	r10, 4
 a8e:	0f c0       	rjmp	.+30     	; 0xaae <__stack+0x24f>
 a90:	fe 01       	movw	r30, r28
 a92:	e8 0d       	add	r30, r8
 a94:	f1 1d       	adc	r31, r1
 a96:	80 81       	ld	r24, Z
 a98:	80 33       	cpi	r24, 0x30	; 48
 a9a:	21 f4       	brne	.+8      	; 0xaa4 <__stack+0x245>
 a9c:	9a 2d       	mov	r25, r10
 a9e:	99 7e       	andi	r25, 0xE9	; 233
 aa0:	a9 2e       	mov	r10, r25
 aa2:	09 c0       	rjmp	.+18     	; 0xab6 <__stack+0x257>
 aa4:	a2 fe       	sbrs	r10, 2
 aa6:	06 c0       	rjmp	.+12     	; 0xab4 <__stack+0x255>
 aa8:	b3 94       	inc	r11
 aaa:	b3 94       	inc	r11
 aac:	04 c0       	rjmp	.+8      	; 0xab6 <__stack+0x257>
 aae:	8a 2d       	mov	r24, r10
 ab0:	86 78       	andi	r24, 0x86	; 134
 ab2:	09 f0       	breq	.+2      	; 0xab6 <__stack+0x257>
 ab4:	b3 94       	inc	r11
 ab6:	a3 fc       	sbrc	r10, 3
 ab8:	11 c0       	rjmp	.+34     	; 0xadc <__stack+0x27d>
 aba:	a0 fe       	sbrs	r10, 0
 abc:	06 c0       	rjmp	.+12     	; 0xaca <__stack+0x26b>
 abe:	b2 14       	cp	r11, r2
 ac0:	88 f4       	brcc	.+34     	; 0xae4 <__stack+0x285>
 ac2:	28 0c       	add	r2, r8
 ac4:	92 2c       	mov	r9, r2
 ac6:	9b 18       	sub	r9, r11
 ac8:	0e c0       	rjmp	.+28     	; 0xae6 <__stack+0x287>
 aca:	b2 14       	cp	r11, r2
 acc:	60 f4       	brcc	.+24     	; 0xae6 <__stack+0x287>
 ace:	b6 01       	movw	r22, r12
 ad0:	80 e2       	ldi	r24, 0x20	; 32
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 d2 05 	call	0xba4	; 0xba4 <fputc>
 ad8:	b3 94       	inc	r11
 ada:	f7 cf       	rjmp	.-18     	; 0xaca <__stack+0x26b>
 adc:	b2 14       	cp	r11, r2
 ade:	18 f4       	brcc	.+6      	; 0xae6 <__stack+0x287>
 ae0:	2b 18       	sub	r2, r11
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <__stack+0x289>
 ae4:	98 2c       	mov	r9, r8
 ae6:	21 2c       	mov	r2, r1
 ae8:	a4 fe       	sbrs	r10, 4
 aea:	10 c0       	rjmp	.+32     	; 0xb0c <__stack+0x2ad>
 aec:	b6 01       	movw	r22, r12
 aee:	80 e3       	ldi	r24, 0x30	; 48
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 d2 05 	call	0xba4	; 0xba4 <fputc>
 af6:	a2 fe       	sbrs	r10, 2
 af8:	17 c0       	rjmp	.+46     	; 0xb28 <__stack+0x2c9>
 afa:	a1 fc       	sbrc	r10, 1
 afc:	03 c0       	rjmp	.+6      	; 0xb04 <__stack+0x2a5>
 afe:	88 e7       	ldi	r24, 0x78	; 120
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <__stack+0x2a9>
 b04:	88 e5       	ldi	r24, 0x58	; 88
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	b6 01       	movw	r22, r12
 b0a:	0c c0       	rjmp	.+24     	; 0xb24 <__stack+0x2c5>
 b0c:	8a 2d       	mov	r24, r10
 b0e:	86 78       	andi	r24, 0x86	; 134
 b10:	59 f0       	breq	.+22     	; 0xb28 <__stack+0x2c9>
 b12:	a1 fe       	sbrs	r10, 1
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <__stack+0x2bb>
 b16:	8b e2       	ldi	r24, 0x2B	; 43
 b18:	01 c0       	rjmp	.+2      	; 0xb1c <__stack+0x2bd>
 b1a:	80 e2       	ldi	r24, 0x20	; 32
 b1c:	a7 fc       	sbrc	r10, 7
 b1e:	8d e2       	ldi	r24, 0x2D	; 45
 b20:	b6 01       	movw	r22, r12
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 d2 05 	call	0xba4	; 0xba4 <fputc>
 b28:	89 14       	cp	r8, r9
 b2a:	38 f4       	brcc	.+14     	; 0xb3a <__stack+0x2db>
 b2c:	b6 01       	movw	r22, r12
 b2e:	80 e3       	ldi	r24, 0x30	; 48
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 d2 05 	call	0xba4	; 0xba4 <fputc>
 b36:	9a 94       	dec	r9
 b38:	f7 cf       	rjmp	.-18     	; 0xb28 <__stack+0x2c9>
 b3a:	8a 94       	dec	r8
 b3c:	f3 01       	movw	r30, r6
 b3e:	e8 0d       	add	r30, r8
 b40:	f1 1d       	adc	r31, r1
 b42:	80 81       	ld	r24, Z
 b44:	b6 01       	movw	r22, r12
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	0e 94 d2 05 	call	0xba4	; 0xba4 <fputc>
 b4c:	81 10       	cpse	r8, r1
 b4e:	f5 cf       	rjmp	.-22     	; 0xb3a <__stack+0x2db>
 b50:	22 20       	and	r2, r2
 b52:	09 f4       	brne	.+2      	; 0xb56 <__stack+0x2f7>
 b54:	42 ce       	rjmp	.-892    	; 0x7da <vfprintf+0x24>
 b56:	b6 01       	movw	r22, r12
 b58:	80 e2       	ldi	r24, 0x20	; 32
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	0e 94 d2 05 	call	0xba4	; 0xba4 <fputc>
 b60:	2a 94       	dec	r2
 b62:	f6 cf       	rjmp	.-20     	; 0xb50 <__stack+0x2f1>
 b64:	f6 01       	movw	r30, r12
 b66:	86 81       	ldd	r24, Z+6	; 0x06
 b68:	97 81       	ldd	r25, Z+7	; 0x07
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <__stack+0x311>
 b6c:	8f ef       	ldi	r24, 0xFF	; 255
 b6e:	9f ef       	ldi	r25, 0xFF	; 255
 b70:	2b 96       	adiw	r28, 0x0b	; 11
 b72:	e2 e1       	ldi	r30, 0x12	; 18
 b74:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__epilogue_restores__>

00000b78 <strnlen_P>:
 b78:	fc 01       	movw	r30, r24
 b7a:	05 90       	lpm	r0, Z+
 b7c:	61 50       	subi	r22, 0x01	; 1
 b7e:	70 40       	sbci	r23, 0x00	; 0
 b80:	01 10       	cpse	r0, r1
 b82:	d8 f7       	brcc	.-10     	; 0xb7a <strnlen_P+0x2>
 b84:	80 95       	com	r24
 b86:	90 95       	com	r25
 b88:	8e 0f       	add	r24, r30
 b8a:	9f 1f       	adc	r25, r31
 b8c:	08 95       	ret

00000b8e <strnlen>:
 b8e:	fc 01       	movw	r30, r24
 b90:	61 50       	subi	r22, 0x01	; 1
 b92:	70 40       	sbci	r23, 0x00	; 0
 b94:	01 90       	ld	r0, Z+
 b96:	01 10       	cpse	r0, r1
 b98:	d8 f7       	brcc	.-10     	; 0xb90 <strnlen+0x2>
 b9a:	80 95       	com	r24
 b9c:	90 95       	com	r25
 b9e:	8e 0f       	add	r24, r30
 ba0:	9f 1f       	adc	r25, r31
 ba2:	08 95       	ret

00000ba4 <fputc>:
 ba4:	0f 93       	push	r16
 ba6:	1f 93       	push	r17
 ba8:	cf 93       	push	r28
 baa:	df 93       	push	r29
 bac:	fb 01       	movw	r30, r22
 bae:	23 81       	ldd	r18, Z+3	; 0x03
 bb0:	21 fd       	sbrc	r18, 1
 bb2:	03 c0       	rjmp	.+6      	; 0xbba <fputc+0x16>
 bb4:	8f ef       	ldi	r24, 0xFF	; 255
 bb6:	9f ef       	ldi	r25, 0xFF	; 255
 bb8:	2c c0       	rjmp	.+88     	; 0xc12 <fputc+0x6e>
 bba:	22 ff       	sbrs	r18, 2
 bbc:	16 c0       	rjmp	.+44     	; 0xbea <fputc+0x46>
 bbe:	46 81       	ldd	r20, Z+6	; 0x06
 bc0:	57 81       	ldd	r21, Z+7	; 0x07
 bc2:	24 81       	ldd	r18, Z+4	; 0x04
 bc4:	35 81       	ldd	r19, Z+5	; 0x05
 bc6:	42 17       	cp	r20, r18
 bc8:	53 07       	cpc	r21, r19
 bca:	44 f4       	brge	.+16     	; 0xbdc <fputc+0x38>
 bcc:	a0 81       	ld	r26, Z
 bce:	b1 81       	ldd	r27, Z+1	; 0x01
 bd0:	9d 01       	movw	r18, r26
 bd2:	2f 5f       	subi	r18, 0xFF	; 255
 bd4:	3f 4f       	sbci	r19, 0xFF	; 255
 bd6:	31 83       	std	Z+1, r19	; 0x01
 bd8:	20 83       	st	Z, r18
 bda:	8c 93       	st	X, r24
 bdc:	26 81       	ldd	r18, Z+6	; 0x06
 bde:	37 81       	ldd	r19, Z+7	; 0x07
 be0:	2f 5f       	subi	r18, 0xFF	; 255
 be2:	3f 4f       	sbci	r19, 0xFF	; 255
 be4:	37 83       	std	Z+7, r19	; 0x07
 be6:	26 83       	std	Z+6, r18	; 0x06
 be8:	14 c0       	rjmp	.+40     	; 0xc12 <fputc+0x6e>
 bea:	8b 01       	movw	r16, r22
 bec:	ec 01       	movw	r28, r24
 bee:	fb 01       	movw	r30, r22
 bf0:	00 84       	ldd	r0, Z+8	; 0x08
 bf2:	f1 85       	ldd	r31, Z+9	; 0x09
 bf4:	e0 2d       	mov	r30, r0
 bf6:	09 95       	icall
 bf8:	89 2b       	or	r24, r25
 bfa:	e1 f6       	brne	.-72     	; 0xbb4 <fputc+0x10>
 bfc:	d8 01       	movw	r26, r16
 bfe:	16 96       	adiw	r26, 0x06	; 6
 c00:	8d 91       	ld	r24, X+
 c02:	9c 91       	ld	r25, X
 c04:	17 97       	sbiw	r26, 0x07	; 7
 c06:	01 96       	adiw	r24, 0x01	; 1
 c08:	17 96       	adiw	r26, 0x07	; 7
 c0a:	9c 93       	st	X, r25
 c0c:	8e 93       	st	-X, r24
 c0e:	16 97       	sbiw	r26, 0x06	; 6
 c10:	ce 01       	movw	r24, r28
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	1f 91       	pop	r17
 c18:	0f 91       	pop	r16
 c1a:	08 95       	ret

00000c1c <__ultoa_invert>:
 c1c:	fa 01       	movw	r30, r20
 c1e:	aa 27       	eor	r26, r26
 c20:	28 30       	cpi	r18, 0x08	; 8
 c22:	51 f1       	breq	.+84     	; 0xc78 <__ultoa_invert+0x5c>
 c24:	20 31       	cpi	r18, 0x10	; 16
 c26:	81 f1       	breq	.+96     	; 0xc88 <__ultoa_invert+0x6c>
 c28:	e8 94       	clt
 c2a:	6f 93       	push	r22
 c2c:	6e 7f       	andi	r22, 0xFE	; 254
 c2e:	6e 5f       	subi	r22, 0xFE	; 254
 c30:	7f 4f       	sbci	r23, 0xFF	; 255
 c32:	8f 4f       	sbci	r24, 0xFF	; 255
 c34:	9f 4f       	sbci	r25, 0xFF	; 255
 c36:	af 4f       	sbci	r26, 0xFF	; 255
 c38:	b1 e0       	ldi	r27, 0x01	; 1
 c3a:	3e d0       	rcall	.+124    	; 0xcb8 <__ultoa_invert+0x9c>
 c3c:	b4 e0       	ldi	r27, 0x04	; 4
 c3e:	3c d0       	rcall	.+120    	; 0xcb8 <__ultoa_invert+0x9c>
 c40:	67 0f       	add	r22, r23
 c42:	78 1f       	adc	r23, r24
 c44:	89 1f       	adc	r24, r25
 c46:	9a 1f       	adc	r25, r26
 c48:	a1 1d       	adc	r26, r1
 c4a:	68 0f       	add	r22, r24
 c4c:	79 1f       	adc	r23, r25
 c4e:	8a 1f       	adc	r24, r26
 c50:	91 1d       	adc	r25, r1
 c52:	a1 1d       	adc	r26, r1
 c54:	6a 0f       	add	r22, r26
 c56:	71 1d       	adc	r23, r1
 c58:	81 1d       	adc	r24, r1
 c5a:	91 1d       	adc	r25, r1
 c5c:	a1 1d       	adc	r26, r1
 c5e:	20 d0       	rcall	.+64     	; 0xca0 <__ultoa_invert+0x84>
 c60:	09 f4       	brne	.+2      	; 0xc64 <__ultoa_invert+0x48>
 c62:	68 94       	set
 c64:	3f 91       	pop	r19
 c66:	2a e0       	ldi	r18, 0x0A	; 10
 c68:	26 9f       	mul	r18, r22
 c6a:	11 24       	eor	r1, r1
 c6c:	30 19       	sub	r19, r0
 c6e:	30 5d       	subi	r19, 0xD0	; 208
 c70:	31 93       	st	Z+, r19
 c72:	de f6       	brtc	.-74     	; 0xc2a <__ultoa_invert+0xe>
 c74:	cf 01       	movw	r24, r30
 c76:	08 95       	ret
 c78:	46 2f       	mov	r20, r22
 c7a:	47 70       	andi	r20, 0x07	; 7
 c7c:	40 5d       	subi	r20, 0xD0	; 208
 c7e:	41 93       	st	Z+, r20
 c80:	b3 e0       	ldi	r27, 0x03	; 3
 c82:	0f d0       	rcall	.+30     	; 0xca2 <__ultoa_invert+0x86>
 c84:	c9 f7       	brne	.-14     	; 0xc78 <__ultoa_invert+0x5c>
 c86:	f6 cf       	rjmp	.-20     	; 0xc74 <__ultoa_invert+0x58>
 c88:	46 2f       	mov	r20, r22
 c8a:	4f 70       	andi	r20, 0x0F	; 15
 c8c:	40 5d       	subi	r20, 0xD0	; 208
 c8e:	4a 33       	cpi	r20, 0x3A	; 58
 c90:	18 f0       	brcs	.+6      	; 0xc98 <__ultoa_invert+0x7c>
 c92:	49 5d       	subi	r20, 0xD9	; 217
 c94:	31 fd       	sbrc	r19, 1
 c96:	40 52       	subi	r20, 0x20	; 32
 c98:	41 93       	st	Z+, r20
 c9a:	02 d0       	rcall	.+4      	; 0xca0 <__ultoa_invert+0x84>
 c9c:	a9 f7       	brne	.-22     	; 0xc88 <__ultoa_invert+0x6c>
 c9e:	ea cf       	rjmp	.-44     	; 0xc74 <__ultoa_invert+0x58>
 ca0:	b4 e0       	ldi	r27, 0x04	; 4
 ca2:	a6 95       	lsr	r26
 ca4:	97 95       	ror	r25
 ca6:	87 95       	ror	r24
 ca8:	77 95       	ror	r23
 caa:	67 95       	ror	r22
 cac:	ba 95       	dec	r27
 cae:	c9 f7       	brne	.-14     	; 0xca2 <__ultoa_invert+0x86>
 cb0:	00 97       	sbiw	r24, 0x00	; 0
 cb2:	61 05       	cpc	r22, r1
 cb4:	71 05       	cpc	r23, r1
 cb6:	08 95       	ret
 cb8:	9b 01       	movw	r18, r22
 cba:	ac 01       	movw	r20, r24
 cbc:	0a 2e       	mov	r0, r26
 cbe:	06 94       	lsr	r0
 cc0:	57 95       	ror	r21
 cc2:	47 95       	ror	r20
 cc4:	37 95       	ror	r19
 cc6:	27 95       	ror	r18
 cc8:	ba 95       	dec	r27
 cca:	c9 f7       	brne	.-14     	; 0xcbe <__ultoa_invert+0xa2>
 ccc:	62 0f       	add	r22, r18
 cce:	73 1f       	adc	r23, r19
 cd0:	84 1f       	adc	r24, r20
 cd2:	95 1f       	adc	r25, r21
 cd4:	a0 1d       	adc	r26, r0
 cd6:	08 95       	ret

00000cd8 <__prologue_saves__>:
 cd8:	2f 92       	push	r2
 cda:	3f 92       	push	r3
 cdc:	4f 92       	push	r4
 cde:	5f 92       	push	r5
 ce0:	6f 92       	push	r6
 ce2:	7f 92       	push	r7
 ce4:	8f 92       	push	r8
 ce6:	9f 92       	push	r9
 ce8:	af 92       	push	r10
 cea:	bf 92       	push	r11
 cec:	cf 92       	push	r12
 cee:	df 92       	push	r13
 cf0:	ef 92       	push	r14
 cf2:	ff 92       	push	r15
 cf4:	0f 93       	push	r16
 cf6:	1f 93       	push	r17
 cf8:	cf 93       	push	r28
 cfa:	df 93       	push	r29
 cfc:	cd b7       	in	r28, 0x3d	; 61
 cfe:	de b7       	in	r29, 0x3e	; 62
 d00:	ca 1b       	sub	r28, r26
 d02:	db 0b       	sbc	r29, r27
 d04:	0f b6       	in	r0, 0x3f	; 63
 d06:	f8 94       	cli
 d08:	de bf       	out	0x3e, r29	; 62
 d0a:	0f be       	out	0x3f, r0	; 63
 d0c:	cd bf       	out	0x3d, r28	; 61
 d0e:	09 94       	ijmp

00000d10 <__epilogue_restores__>:
 d10:	2a 88       	ldd	r2, Y+18	; 0x12
 d12:	39 88       	ldd	r3, Y+17	; 0x11
 d14:	48 88       	ldd	r4, Y+16	; 0x10
 d16:	5f 84       	ldd	r5, Y+15	; 0x0f
 d18:	6e 84       	ldd	r6, Y+14	; 0x0e
 d1a:	7d 84       	ldd	r7, Y+13	; 0x0d
 d1c:	8c 84       	ldd	r8, Y+12	; 0x0c
 d1e:	9b 84       	ldd	r9, Y+11	; 0x0b
 d20:	aa 84       	ldd	r10, Y+10	; 0x0a
 d22:	b9 84       	ldd	r11, Y+9	; 0x09
 d24:	c8 84       	ldd	r12, Y+8	; 0x08
 d26:	df 80       	ldd	r13, Y+7	; 0x07
 d28:	ee 80       	ldd	r14, Y+6	; 0x06
 d2a:	fd 80       	ldd	r15, Y+5	; 0x05
 d2c:	0c 81       	ldd	r16, Y+4	; 0x04
 d2e:	1b 81       	ldd	r17, Y+3	; 0x03
 d30:	aa 81       	ldd	r26, Y+2	; 0x02
 d32:	b9 81       	ldd	r27, Y+1	; 0x01
 d34:	ce 0f       	add	r28, r30
 d36:	d1 1d       	adc	r29, r1
 d38:	0f b6       	in	r0, 0x3f	; 63
 d3a:	f8 94       	cli
 d3c:	de bf       	out	0x3e, r29	; 62
 d3e:	0f be       	out	0x3f, r0	; 63
 d40:	cd bf       	out	0x3d, r28	; 61
 d42:	ed 01       	movw	r28, r26
 d44:	08 95       	ret

00000d46 <_exit>:
 d46:	f8 94       	cli

00000d48 <__stop_program>:
 d48:	ff cf       	rjmp	.-2      	; 0xd48 <__stop_program>
