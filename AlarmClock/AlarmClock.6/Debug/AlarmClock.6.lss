
AlarmClock.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00000dd2  00000e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800122  00800122  00000f28  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000182c  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af8  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d49  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  000041e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c0  00000000  00000000  00004550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b69  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005679  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 32       	cpi	r26, 0x22	; 34
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e2       	ldi	r26, 0x22	; 34
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 34       	cpi	r26, 0x4C	; 76
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 03 	call	0x742	; 0x742 <main>
  8a:	0c 94 e7 06 	jmp	0xdce	; 0xdce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time_init>:
#include "Alarm_Clock.h"

void time_init(Time* time)
{
  92:	dc 01       	movw	r26, r24
	time->hour = time->minute = time->second = time->isPM = 0;
  94:	16 96       	adiw	r26, 0x06	; 6
  96:	1c 92       	st	X, r1
  98:	16 97       	sbiw	r26, 0x06	; 6
  9a:	15 96       	adiw	r26, 0x05	; 5
  9c:	1c 92       	st	X, r1
  9e:	1e 92       	st	-X, r1
  a0:	14 97       	sbiw	r26, 0x04	; 4
  a2:	13 96       	adiw	r26, 0x03	; 3
  a4:	1c 92       	st	X, r1
  a6:	1e 92       	st	-X, r1
  a8:	12 97       	sbiw	r26, 0x02	; 2
  aa:	11 96       	adiw	r26, 0x01	; 1
  ac:	1c 92       	st	X, r1
  ae:	1e 92       	st	-X, r1
	strcpy(time->msgTime, "00:00:00 AM");
  b0:	17 96       	adiw	r26, 0x07	; 7
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <time_init+0x26>
  c0:	08 95       	ret

000000c2 <time_read>:
}

int time_read()
{
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	int result = 0, digits = 2;
  cc:	68 94       	set
  ce:	ee 24       	eor	r14, r14
  d0:	e1 f8       	bld	r14, 1
  d2:	f1 2c       	mov	r15, r1
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
	while(digits)
  d8:	24 c0       	rjmp	.+72     	; 0x122 <time_read+0x60>
	{
		char key = keypad_read();
  da:	0e 94 43 02 	call	0x486	; 0x486 <keypad_read>
  de:	18 2f       	mov	r17, r24
		if (key >= '0' && key <= '9')
  e0:	80 ed       	ldi	r24, 0xD0	; 208
  e2:	81 0f       	add	r24, r17
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	a0 f4       	brcc	.+40     	; 0x110 <time_read+0x4e>
		{
			LCD_char(key);
  e8:	81 2f       	mov	r24, r17
  ea:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_char>
			result = result * 10 + key - '0';
  ee:	ce 01       	movw	r24, r28
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	cc 0f       	add	r28, r28
  f6:	dd 1f       	adc	r29, r29
  f8:	cc 0f       	add	r28, r28
  fa:	dd 1f       	adc	r29, r29
  fc:	cc 0f       	add	r28, r28
  fe:	dd 1f       	adc	r29, r29
 100:	c8 0f       	add	r28, r24
 102:	d9 1f       	adc	r29, r25
 104:	c1 0f       	add	r28, r17
 106:	d1 1d       	adc	r29, r1
 108:	e0 97       	sbiw	r28, 0x30	; 48
			digits--;
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	e2 1a       	sub	r14, r18
 10e:	f1 08       	sbc	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	96 e7       	ldi	r25, 0x76	; 118
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	81 50       	subi	r24, 0x01	; 1
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	20 40       	sbci	r18, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <time_read+0x54>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <time_read+0x5e>
 120:	00 00       	nop
}

int time_read()
{
	int result = 0, digits = 2;
	while(digits)
 122:	e1 14       	cp	r14, r1
 124:	f1 04       	cpc	r15, r1
 126:	c9 f6       	brne	.-78     	; 0xda <time_read+0x18>
			digits--;
		}
		_delay_ms(30);
	}
	return result;
}
 128:	ce 01       	movw	r24, r28
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	ff 90       	pop	r15
 132:	ef 90       	pop	r14
 134:	08 95       	ret

00000136 <time_adjust>:

char time_adjust(Time* time) {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	LCD_gotoxy(1, 0);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 82 03 	call	0x704	; 0x704 <LCD_gotoxy>
	LCD_string("HH : MM : SS");
 144:	8c e6       	ldi	r24, 0x6C	; 108
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
	LCD_gotoxy(1, 0);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 82 03 	call	0x704	; 0x704 <LCD_gotoxy>
	time->hour = time_read();
 154:	0e 94 61 00 	call	0xc2	; 0xc2 <time_read>
 158:	99 83       	std	Y+1, r25	; 0x01
 15a:	88 83       	st	Y, r24
	time->isPM = time->hour > 11;
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	0c 97       	sbiw	r24, 0x0c	; 12
 160:	0c f4       	brge	.+2      	; 0x164 <time_adjust+0x2e>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	2e 83       	std	Y+6, r18	; 0x06
	LCD_gotoxy(1, 5);
 166:	65 e0       	ldi	r22, 0x05	; 5
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 82 03 	call	0x704	; 0x704 <LCD_gotoxy>
	time->minute = time_read();
 16e:	0e 94 61 00 	call	0xc2	; 0xc2 <time_read>
 172:	9b 83       	std	Y+3, r25	; 0x03
 174:	8a 83       	std	Y+2, r24	; 0x02
	LCD_gotoxy(1, 10);
 176:	6a e0       	ldi	r22, 0x0A	; 10
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 82 03 	call	0x704	; 0x704 <LCD_gotoxy>
	time->second = time_read();
 17e:	0e 94 61 00 	call	0xc2	; 0xc2 <time_read>
 182:	9d 83       	std	Y+5, r25	; 0x05
 184:	8c 83       	std	Y+4, r24	; 0x04
	LCD_clear();
 186:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_clear>
	return (time->hour > -1 && time->hour < 24 && time->minute > -1 && time->minute < 60 && time->second > -1 && time->second < 60);
 18a:	88 81       	ld	r24, Y
 18c:	99 81       	ldd	r25, Y+1	; 0x01
 18e:	48 97       	sbiw	r24, 0x18	; 24
 190:	70 f4       	brcc	.+28     	; 0x1ae <time_adjust+0x78>
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	9b 81       	ldd	r25, Y+3	; 0x03
 196:	99 23       	and	r25, r25
 198:	64 f0       	brlt	.+24     	; 0x1b2 <time_adjust+0x7c>
 19a:	cc 97       	sbiw	r24, 0x3c	; 60
 19c:	64 f4       	brge	.+24     	; 0x1b6 <time_adjust+0x80>
 19e:	8c 81       	ldd	r24, Y+4	; 0x04
 1a0:	9d 81       	ldd	r25, Y+5	; 0x05
 1a2:	99 23       	and	r25, r25
 1a4:	54 f0       	brlt	.+20     	; 0x1ba <time_adjust+0x84>
 1a6:	cc 97       	sbiw	r24, 0x3c	; 60
 1a8:	54 f0       	brlt	.+20     	; 0x1be <time_adjust+0x88>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <time_adjust+0x8a>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <time_adjust+0x8a>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <time_adjust+0x8a>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <time_adjust+0x8a>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <time_adjust+0x8a>
 1be:	81 e0       	ldi	r24, 0x01	; 1
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <time_display>:

void time_display(Time* time)
{	
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
	sprintf(time->msgTime, "%02d:%02d:%02d AM", time->hour, time->minute, time->second);
 1d0:	8c 01       	movw	r16, r24
 1d2:	09 5f       	subi	r16, 0xF9	; 249
 1d4:	1f 4f       	sbci	r17, 0xFF	; 255
 1d6:	8d 81       	ldd	r24, Y+5	; 0x05
 1d8:	8f 93       	push	r24
 1da:	8c 81       	ldd	r24, Y+4	; 0x04
 1dc:	8f 93       	push	r24
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	8f 93       	push	r24
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	8f 93       	push	r24
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	8f 93       	push	r24
 1ea:	88 81       	ld	r24, Y
 1ec:	8f 93       	push	r24
 1ee:	89 e7       	ldi	r24, 0x79	; 121
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	9f 93       	push	r25
 1f4:	8f 93       	push	r24
 1f6:	1f 93       	push	r17
 1f8:	0f 93       	push	r16
 1fa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <sprintf>
	if (time->isPM)time->msgTime[9] = 'P';
 1fe:	8e 81       	ldd	r24, Y+6	; 0x06
 200:	2d b7       	in	r18, 0x3d	; 61
 202:	3e b7       	in	r19, 0x3e	; 62
 204:	26 5f       	subi	r18, 0xF6	; 246
 206:	3f 4f       	sbci	r19, 0xFF	; 255
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	3e bf       	out	0x3e, r19	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	2d bf       	out	0x3d, r18	; 61
 212:	88 23       	and	r24, r24
 214:	11 f0       	breq	.+4      	; 0x21a <time_display+0x54>
 216:	80 e5       	ldi	r24, 0x50	; 80
 218:	88 8b       	std	Y+16, r24	; 0x10
	LCD_string(time->msgTime);
 21a:	c8 01       	movw	r24, r16
 21c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <alarm_init>:

//////////////////////////////////////////////////////////////////////////////

void alarm_init()
{
	time_init(&alarmTime);
 22a:	86 e2       	ldi	r24, 0x26	; 38
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 49 00 	call	0x92	; 0x92 <time_init>
 232:	08 95       	ret

00000234 <clock_init>:
}

void clock_init()
{
	time_init(&clockTime);
 234:	89 e3       	ldi	r24, 0x39	; 57
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 49 00 	call	0x92	; 0x92 <time_init>
 23c:	08 95       	ret

0000023e <alarm_adjust>:

void alarm_adjust()
{
	while (1)
	{
		LCD_clear();
 23e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_clear>
		LCD_string("Set Alarm Time:");
 242:	8b e8       	ldi	r24, 0x8B	; 139
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
		if (time_adjust(&alarmTime))
 24a:	86 e2       	ldi	r24, 0x26	; 38
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 9b 00 	call	0x136	; 0x136 <time_adjust>
 252:	88 23       	and	r24, r24
 254:	71 f0       	breq	.+28     	; 0x272 <alarm_adjust+0x34>
		{
			LCD_string("Alarm Time Set!");
 256:	8b e9       	ldi	r24, 0x9B	; 155
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	85 ea       	ldi	r24, 0xA5	; 165
 262:	9e e0       	ldi	r25, 0x0E	; 14
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <alarm_adjust+0x26>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <alarm_adjust+0x30>
 26e:	00 00       	nop
			_delay_ms(300);
			return;
 270:	08 95       	ret
		}
		LCD_string("Invalid Alarm Time!");
 272:	8b ea       	ldi	r24, 0xAB	; 171
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	85 ea       	ldi	r24, 0xA5	; 165
 27e:	9e e0       	ldi	r25, 0x0E	; 14
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <alarm_adjust+0x42>
 288:	00 c0       	rjmp	.+0      	; 0x28a <alarm_adjust+0x4c>
 28a:	00 00       	nop
 28c:	d8 cf       	rjmp	.-80     	; 0x23e <alarm_adjust>

0000028e <clock_adjust>:

void clock_adjust()
{
	while (1)
	{
		LCD_clear();
 28e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_clear>
		LCD_string("Set Clock Time:");
 292:	8f eb       	ldi	r24, 0xBF	; 191
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
		if (time_adjust(&clockTime))
 29a:	89 e3       	ldi	r24, 0x39	; 57
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 9b 00 	call	0x136	; 0x136 <time_adjust>
 2a2:	88 23       	and	r24, r24
 2a4:	71 f0       	breq	.+28     	; 0x2c2 <clock_adjust+0x34>
		{
			LCD_string("Clock Time Set!");
 2a6:	8f ec       	ldi	r24, 0xCF	; 207
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	85 ea       	ldi	r24, 0xA5	; 165
 2b2:	9e e0       	ldi	r25, 0x0E	; 14
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <clock_adjust+0x26>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <clock_adjust+0x30>
 2be:	00 00       	nop
			_delay_ms(300);
			return;
 2c0:	08 95       	ret
		}
		LCD_string("Invalid Clock Time!");
 2c2:	8f ed       	ldi	r24, 0xDF	; 223
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	85 ea       	ldi	r24, 0xA5	; 165
 2ce:	9e e0       	ldi	r25, 0x0E	; 14
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <clock_adjust+0x42>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <clock_adjust+0x4c>
 2da:	00 00       	nop
 2dc:	d8 cf       	rjmp	.-80     	; 0x28e <clock_adjust>

000002de <alarm_display>:
	}
}

void alarm_display()
{
	LCD_gotoxy(2, 0);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 82 03 	call	0x704	; 0x704 <LCD_gotoxy>
	LCD_string("Alarm: ");
 2e6:	83 ef       	ldi	r24, 0xF3	; 243
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
	time_display(&alarmTime);
 2ee:	86 e2       	ldi	r24, 0x26	; 38
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <time_display>
 2f6:	08 95       	ret

000002f8 <clock_display>:
}

void clock_display()
{
	LCD_clear();
 2f8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_clear>
	LCD_string("Clock: ");
 2fc:	8b ef       	ldi	r24, 0xFB	; 251
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
	time_display(&clockTime);
 304:	89 e3       	ldi	r24, 0x39	; 57
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <time_display>
 30c:	08 95       	ret

0000030e <clock_update>:
}

void clock_update()
{
	clockTime.second++;
 30e:	e9 e3       	ldi	r30, 0x39	; 57
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	84 81       	ldd	r24, Z+4	; 0x04
 314:	95 81       	ldd	r25, Z+5	; 0x05
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	95 83       	std	Z+5, r25	; 0x05
 31a:	84 83       	std	Z+4, r24	; 0x04
	if (clockTime.second > 59)
 31c:	cc 97       	sbiw	r24, 0x3c	; 60
 31e:	0c f1       	brlt	.+66     	; 0x362 <clock_update+0x54>
	{
		clockTime.second = 0;
 320:	15 82       	std	Z+5, r1	; 0x05
 322:	14 82       	std	Z+4, r1	; 0x04
		clockTime.minute++;
 324:	82 81       	ldd	r24, Z+2	; 0x02
 326:	93 81       	ldd	r25, Z+3	; 0x03
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	93 83       	std	Z+3, r25	; 0x03
 32c:	82 83       	std	Z+2, r24	; 0x02
		if (clockTime.minute > 59)
 32e:	cc 97       	sbiw	r24, 0x3c	; 60
 330:	c4 f0       	brlt	.+48     	; 0x362 <clock_update+0x54>
		{
			clockTime.minute = 0;
 332:	13 82       	std	Z+3, r1	; 0x03
 334:	12 82       	std	Z+2, r1	; 0x02
			clockTime.hour++;
 336:	80 81       	ld	r24, Z
 338:	91 81       	ldd	r25, Z+1	; 0x01
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	91 83       	std	Z+1, r25	; 0x01
 33e:	80 83       	st	Z, r24
			if (clockTime.hour > 23)
 340:	48 97       	sbiw	r24, 0x18	; 24
 342:	24 f0       	brlt	.+8      	; 0x34c <clock_update+0x3e>
			{
				clockTime.hour = 0;
 344:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <clockTime+0x1>
 348:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <clockTime>
			}
			clockTime.isPM = clockTime.hour > 11;
 34c:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <clockTime>
 350:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <clockTime+0x1>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	2c 30       	cpi	r18, 0x0C	; 12
 358:	31 05       	cpc	r19, r1
 35a:	0c f4       	brge	.+2      	; 0x35e <clock_update+0x50>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <clockTime+0x6>
 362:	08 95       	ret

00000364 <alarm_mode>:
	}
}

void alarm_mode()
{
	alarm_adjust();
 364:	0e 94 1f 01 	call	0x23e	; 0x23e <alarm_adjust>
	LCD_gotoxy(2, 0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 82 03 	call	0x704	; 0x704 <LCD_gotoxy>
	LCD_string("Alarm mode...");
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 62 03 	call	0x6c4	; 0x6c4 <LCD_string>
	while(1)
	{
		char key = keypad_read();
 378:	0e 94 43 02 	call	0x486	; 0x486 <keypad_read>
		if (key == '*') return;
 37c:	8a 32       	cpi	r24, 0x2A	; 42
 37e:	51 f0       	breq	.+20     	; 0x394 <alarm_mode+0x30>
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	86 e7       	ldi	r24, 0x76	; 118
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <alarm_mode+0x22>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <alarm_mode+0x2c>
 390:	00 00       	nop
 392:	f2 cf       	rjmp	.-28     	; 0x378 <alarm_mode+0x14>
 394:	08 95       	ret

00000396 <buttons_checking>:

//////////////////////////////////////////////////////////////////////////////

void buttons_checking()
{
	char key = keypad_read();
 396:	0e 94 43 02 	call	0x486	; 0x486 <keypad_read>
	switch (key)
 39a:	8d 32       	cpi	r24, 0x2D	; 45
 39c:	99 f0       	breq	.+38     	; 0x3c4 <buttons_checking+0x2e>
 39e:	8f 32       	cpi	r24, 0x2F	; 47
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <buttons_checking+0x12>
 3a2:	8a 32       	cpi	r24, 0x2A	; 42
 3a4:	a9 f4       	brne	.+42     	; 0x3d0 <buttons_checking+0x3a>
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <buttons_checking+0x20>
	{
		case '/':
		timer0_stop();
 3a8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <timer0_stop>
		clock_adjust();
 3ac:	0e 94 47 01 	call	0x28e	; 0x28e <clock_adjust>
		timer0_start();
 3b0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <timer0_start>
		break;
 3b4:	0d c0       	rjmp	.+26     	; 0x3d0 <buttons_checking+0x3a>
		case '*':
		timer0_stop();
 3b6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <timer0_stop>
		alarm_mode();
 3ba:	0e 94 b2 01 	call	0x364	; 0x364 <alarm_mode>
		timer0_start();
 3be:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <timer0_start>
		break;
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <buttons_checking+0x3a>
		case '-':
		timer0_stop();
 3c4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <timer0_stop>
		led_of();
 3c8:	0e 94 9d 03 	call	0x73a	; 0x73a <led_of>
		timer0_start();
 3cc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <timer0_start>
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	86 e7       	ldi	r24, 0x76	; 118
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <buttons_checking+0x40>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <buttons_checking+0x4a>
 3e0:	00 00       	nop
 3e2:	08 95       	ret

000003e4 <every_second>:
}

int tick = 0;
void every_second()
{
	tick++;
 3e4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 3e8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
 3f2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
	if (tick == NOMBER_OF_OVERFLOWS)
 3f6:	cf 97       	sbiw	r24, 0x3f	; 63
 3f8:	b1 f4       	brne	.+44     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
		clock_update();
 3fa:	0e 94 87 01 	call	0x30e	; 0x30e <clock_update>
		clock_display();
 3fe:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <clock_display>
		alarm_display();
 402:	0e 94 6f 01 	call	0x2de	; 0x2de <alarm_display>
		if (!strcmp(alarmTime.msgTime, clockTime.msgTime))
 406:	60 e4       	ldi	r22, 0x40	; 64
 408:	71 e0       	ldi	r23, 0x01	; 1
 40a:	8d e2       	ldi	r24, 0x2D	; 45
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <strcmp>
 412:	89 2b       	or	r24, r25
 414:	21 f4       	brne	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		{
			led_on();
 416:	0e 94 99 03 	call	0x732	; 0x732 <led_on>
			buzzer_on();
 41a:	0e 94 14 02 	call	0x428	; 0x428 <buzzer_on>
		}
		tick = 0;
 41e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
 422:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
 426:	08 95       	ret

00000428 <buzzer_on>:
	SET_BIT(DDRC, 6);
}

void buzzer_on()
{
	SET_BIT(PORTC, 6);
 428:	85 b3       	in	r24, 0x15	; 21
 42a:	80 64       	ori	r24, 0x40	; 64
 42c:	85 bb       	out	0x15, r24	; 21
 42e:	08 95       	ret

00000430 <keypad_init>:
{'1','2','3','-'},
{'C','0','=','+'}
};

void keypad_init(){
	CLR_BIT(DDRD,7);
 430:	81 b3       	in	r24, 0x11	; 17
 432:	8f 77       	andi	r24, 0x7F	; 127
 434:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,6);
 436:	81 b3       	in	r24, 0x11	; 17
 438:	8f 7b       	andi	r24, 0xBF	; 191
 43a:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,5);
 43c:	81 b3       	in	r24, 0x11	; 17
 43e:	8f 7d       	andi	r24, 0xDF	; 223
 440:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD,3);
 442:	81 b3       	in	r24, 0x11	; 17
 444:	87 7f       	andi	r24, 0xF7	; 247
 446:	81 bb       	out	0x11, r24	; 17
	
	SET_BIT(DDRC,5);
 448:	84 b3       	in	r24, 0x14	; 20
 44a:	80 62       	ori	r24, 0x20	; 32
 44c:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,4);
 44e:	84 b3       	in	r24, 0x14	; 20
 450:	80 61       	ori	r24, 0x10	; 16
 452:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,3);
 454:	84 b3       	in	r24, 0x14	; 20
 456:	88 60       	ori	r24, 0x08	; 8
 458:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,2);
 45a:	84 b3       	in	r24, 0x14	; 20
 45c:	84 60       	ori	r24, 0x04	; 4
 45e:	84 bb       	out	0x14, r24	; 20
	
	SET_BIT(PORTD,7);
 460:	82 b3       	in	r24, 0x12	; 18
 462:	80 68       	ori	r24, 0x80	; 128
 464:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,6);
 466:	82 b3       	in	r24, 0x12	; 18
 468:	80 64       	ori	r24, 0x40	; 64
 46a:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,5);
 46c:	82 b3       	in	r24, 0x12	; 18
 46e:	80 62       	ori	r24, 0x20	; 32
 470:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,3);
 472:	82 b3       	in	r24, 0x12	; 18
 474:	88 60       	ori	r24, 0x08	; 8
 476:	82 bb       	out	0x12, r24	; 18
 478:	8f e1       	ldi	r24, 0x1F	; 31
 47a:	9e e4       	ldi	r25, 0x4E	; 78
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <keypad_init+0x4c>
 480:	00 c0       	rjmp	.+0      	; 0x482 <keypad_init+0x52>
 482:	00 00       	nop
 484:	08 95       	ret

00000486 <keypad_read>:
	_delay_ms(5);
}
unsigned char keypad_read(void){
	unsigned char col,row,ans = INVALID_KEYPAD_PRESS;
 486:	8f ef       	ldi	r24, 0xFF	; 255
	for (row=5;row>=2;row--)
 488:	e5 e0       	ldi	r30, 0x05	; 5
 48a:	62 c0       	rjmp	.+196    	; 0x550 <keypad_read+0xca>
	{
		PORTC |= 0b00111100;
 48c:	95 b3       	in	r25, 0x15	; 21
 48e:	9c 63       	ori	r25, 0x3C	; 60
 490:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(PORTC,row);
 492:	95 b3       	in	r25, 0x15	; 21
 494:	6e 2f       	mov	r22, r30
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	0e 2e       	mov	r0, r30
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <keypad_read+0x1e>
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	0a 94       	dec	r0
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <keypad_read+0x1a>
 4a8:	20 95       	com	r18
 4aa:	29 23       	and	r18, r25
 4ac:	25 bb       	out	0x15, r18	; 21
		for (col=7;col>=3;col--)
 4ae:	97 e0       	ldi	r25, 0x07	; 7
 4b0:	4b c0       	rjmp	.+150    	; 0x548 <keypad_read+0xc2>
		{
			if (col==4)
 4b2:	94 30       	cpi	r25, 0x04	; 4
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <keypad_read+0x32>
			{
				col--;
 4b6:	91 50       	subi	r25, 0x01	; 1
			}
			if (GET_BIT(PIND,col)==0)
 4b8:	20 b3       	in	r18, 0x10	; 16
 4ba:	49 2f       	mov	r20, r25
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	09 2e       	mov	r0, r25
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <keypad_read+0x42>
 4c4:	35 95       	asr	r19
 4c6:	27 95       	ror	r18
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <keypad_read+0x3e>
 4cc:	20 fd       	sbrc	r18, 0
 4ce:	3b c0       	rjmp	.+118    	; 0x546 <keypad_read+0xc0>
 4d0:	2f ef       	ldi	r18, 0xFF	; 255
 4d2:	3b ed       	ldi	r19, 0xDB	; 219
 4d4:	f5 e0       	ldi	r31, 0x05	; 5
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	30 40       	sbci	r19, 0x00	; 0
 4da:	f0 40       	sbci	r31, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <keypad_read+0x50>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <keypad_read+0x5a>
 4e0:	00 00       	nop
			{
				_delay_ms(120);
				if (GET_BIT(PIND,col)==0)
 4e2:	20 b3       	in	r18, 0x10	; 16
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	09 2e       	mov	r0, r25
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <keypad_read+0x68>
 4ea:	35 95       	asr	r19
 4ec:	27 95       	ror	r18
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <keypad_read+0x64>
 4f2:	20 fd       	sbrc	r18, 0
 4f4:	28 c0       	rjmp	.+80     	; 0x546 <keypad_read+0xc0>
				{
					if (col==3)
 4f6:	93 30       	cpi	r25, 0x03	; 3
 4f8:	99 f4       	brne	.+38     	; 0x520 <keypad_read+0x9a>
					{
						ans=arr[5-row][7-col-1];
 4fa:	85 e0       	ldi	r24, 0x05	; 5
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	86 1b       	sub	r24, r22
 500:	97 0b       	sbc	r25, r23
 502:	26 e0       	ldi	r18, 0x06	; 6
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	24 1b       	sub	r18, r20
 508:	35 0b       	sbc	r19, r21
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	8f 5e       	subi	r24, 0xEF	; 239
 514:	9e 4f       	sbci	r25, 0xFE	; 254
 516:	dc 01       	movw	r26, r24
 518:	a2 0f       	add	r26, r18
 51a:	b3 1f       	adc	r27, r19
 51c:	8c 91       	ld	r24, X
						break;
 51e:	17 c0       	rjmp	.+46     	; 0x54e <keypad_read+0xc8>
					}
					else
					{
						ans=arr[5-row][7-col];
 520:	85 e0       	ldi	r24, 0x05	; 5
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	86 1b       	sub	r24, r22
 526:	97 0b       	sbc	r25, r23
 528:	27 e0       	ldi	r18, 0x07	; 7
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	24 1b       	sub	r18, r20
 52e:	35 0b       	sbc	r19, r21
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	8f 5e       	subi	r24, 0xEF	; 239
 53a:	9e 4f       	sbci	r25, 0xFE	; 254
 53c:	dc 01       	movw	r26, r24
 53e:	a2 0f       	add	r26, r18
 540:	b3 1f       	adc	r27, r19
 542:	8c 91       	ld	r24, X
						break;
 544:	04 c0       	rjmp	.+8      	; 0x54e <keypad_read+0xc8>
	unsigned char col,row,ans = INVALID_KEYPAD_PRESS;
	for (row=5;row>=2;row--)
	{
		PORTC |= 0b00111100;
		CLR_BIT(PORTC,row);
		for (col=7;col>=3;col--)
 546:	91 50       	subi	r25, 0x01	; 1
 548:	93 30       	cpi	r25, 0x03	; 3
 54a:	08 f0       	brcs	.+2      	; 0x54e <keypad_read+0xc8>
 54c:	b2 cf       	rjmp	.-156    	; 0x4b2 <keypad_read+0x2c>
	SET_BIT(PORTD,3);
	_delay_ms(5);
}
unsigned char keypad_read(void){
	unsigned char col,row,ans = INVALID_KEYPAD_PRESS;
	for (row=5;row>=2;row--)
 54e:	e1 50       	subi	r30, 0x01	; 1
 550:	e2 30       	cpi	r30, 0x02	; 2
 552:	08 f0       	brcs	.+2      	; 0x556 <keypad_read+0xd0>
 554:	9b cf       	rjmp	.-202    	; 0x48c <keypad_read+0x6>
				}
			}
		}
	}
	return ans;
 556:	08 95       	ret

00000558 <LCD_command>:
	LCD_command(0x80);
}

void LCD_command(unsigned char cmd)
{
	CLR_BIT(PORTA, 3);
 558:	9b b3       	in	r25, 0x1b	; 27
 55a:	97 7f       	andi	r25, 0xF7	; 247
 55c:	9b bb       	out	0x1b, r25	; 27
	
	PORTB &= 0b11101000;
 55e:	98 b3       	in	r25, 0x18	; 24
 560:	98 7e       	andi	r25, 0xE8	; 232
 562:	98 bb       	out	0x18, r25	; 24
	unsigned char high = (cmd & 0xf0) >> 4;					//1111 0000		=>	 	//0000 1111
 564:	28 2f       	mov	r18, r24
 566:	22 95       	swap	r18
 568:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char temp = ((high & 0b00001000) << 1) | (high & 0b00000111);			//0001 0111
 56a:	92 2f       	mov	r25, r18
 56c:	98 70       	andi	r25, 0x08	; 8
 56e:	49 2f       	mov	r20, r25
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	27 70       	andi	r18, 0x07	; 7
 578:	42 2b       	or	r20, r18
	PORTB |= temp;
 57a:	98 b3       	in	r25, 0x18	; 24
 57c:	49 2b       	or	r20, r25
 57e:	48 bb       	out	0x18, r20	; 24
	
	CLR_BIT(PORTA, 2);
 580:	9b b3       	in	r25, 0x1b	; 27
 582:	9b 7f       	andi	r25, 0xFB	; 251
 584:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(PORTA, 2);
 586:	9b b3       	in	r25, 0x1b	; 27
 588:	94 60       	ori	r25, 0x04	; 4
 58a:	9b bb       	out	0x1b, r25	; 27
 58c:	ef e9       	ldi	r30, 0x9F	; 159
 58e:	ff e0       	ldi	r31, 0x0F	; 15
 590:	31 97       	sbiw	r30, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <LCD_command+0x38>
 594:	00 c0       	rjmp	.+0      	; 0x596 <LCD_command+0x3e>
 596:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 598:	9b b3       	in	r25, 0x1b	; 27
 59a:	9b 7f       	andi	r25, 0xFB	; 251
 59c:	9b bb       	out	0x1b, r25	; 27
	
	
	PORTB &= 0b11101000;
 59e:	98 b3       	in	r25, 0x18	; 24
 5a0:	98 7e       	andi	r25, 0xE8	; 232
 5a2:	98 bb       	out	0x18, r25	; 24
	unsigned char low = cmd & 0x0f;
	unsigned char temp2 = ((low & 0b00001000) << 1) | (low & 0b00000111);
 5a4:	98 2f       	mov	r25, r24
 5a6:	98 70       	andi	r25, 0x08	; 8
 5a8:	29 2f       	mov	r18, r25
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	22 0f       	add	r18, r18
 5ae:	33 1f       	adc	r19, r19
 5b0:	87 70       	andi	r24, 0x07	; 7
 5b2:	28 2b       	or	r18, r24
	PORTB |= temp2;
 5b4:	88 b3       	in	r24, 0x18	; 24
 5b6:	28 2b       	or	r18, r24
 5b8:	28 bb       	out	0x18, r18	; 24
	
	CLR_BIT(PORTA, 2);
 5ba:	8b b3       	in	r24, 0x1b	; 27
 5bc:	8b 7f       	andi	r24, 0xFB	; 251
 5be:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA, 2);
 5c0:	8b b3       	in	r24, 0x1b	; 27
 5c2:	84 60       	ori	r24, 0x04	; 4
 5c4:	8b bb       	out	0x1b, r24	; 27
 5c6:	8f e9       	ldi	r24, 0x9F	; 159
 5c8:	9f e0       	ldi	r25, 0x0F	; 15
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <LCD_command+0x72>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <LCD_command+0x78>
 5d0:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 5d2:	8b b3       	in	r24, 0x1b	; 27
 5d4:	8b 7f       	andi	r24, 0xFB	; 251
 5d6:	8b bb       	out	0x1b, r24	; 27
 5d8:	ef e1       	ldi	r30, 0x1F	; 31
 5da:	fe e4       	ldi	r31, 0x4E	; 78
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <LCD_command+0x84>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <LCD_command+0x8a>
 5e2:	00 00       	nop
 5e4:	08 95       	ret

000005e6 <LCD_init>:
#include "LCD.h"

void LCD_init(void)
{
	SET_BIT(DDRA, 2);
 5e6:	8a b3       	in	r24, 0x1a	; 26
 5e8:	84 60       	ori	r24, 0x04	; 4
 5ea:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA, 3);
 5ec:	8a b3       	in	r24, 0x1a	; 26
 5ee:	88 60       	ori	r24, 0x08	; 8
 5f0:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRB, 0);
 5f2:	87 b3       	in	r24, 0x17	; 23
 5f4:	81 60       	ori	r24, 0x01	; 1
 5f6:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 1);
 5f8:	87 b3       	in	r24, 0x17	; 23
 5fa:	82 60       	ori	r24, 0x02	; 2
 5fc:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 2);
 5fe:	87 b3       	in	r24, 0x17	; 23
 600:	84 60       	ori	r24, 0x04	; 4
 602:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 4);
 604:	87 b3       	in	r24, 0x17	; 23
 606:	80 61       	ori	r24, 0x10	; 16
 608:	87 bb       	out	0x17, r24	; 23
 60a:	8f e5       	ldi	r24, 0x5F	; 95
 60c:	9a ee       	ldi	r25, 0xEA	; 234
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <LCD_init+0x28>
 612:	00 c0       	rjmp	.+0      	; 0x614 <LCD_init+0x2e>
 614:	00 00       	nop
	
	_delay_ms(15);
	LCD_command(0x02);
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_command>
	LCD_command(0x28);
 61c:	88 e2       	ldi	r24, 0x28	; 40
 61e:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_command>
	LCD_command(0x0c);
 622:	8c e0       	ldi	r24, 0x0C	; 12
 624:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_command>
	LCD_command(0x01);
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_command>
	LCD_command(0x80);
 62e:	80 e8       	ldi	r24, 0x80	; 128
 630:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_command>
 634:	08 95       	ret

00000636 <LCD_char>:
	_delay_ms(5);
}

void LCD_char(unsigned char chr)
{
	SET_BIT(PORTA, 3);
 636:	9b b3       	in	r25, 0x1b	; 27
 638:	98 60       	ori	r25, 0x08	; 8
 63a:	9b bb       	out	0x1b, r25	; 27
	
	PORTB &= 0b11101000;
 63c:	98 b3       	in	r25, 0x18	; 24
 63e:	98 7e       	andi	r25, 0xE8	; 232
 640:	98 bb       	out	0x18, r25	; 24
	unsigned char high = (chr & 0xf0) >> 4;					//1111 0000		=>	 	//0000 1111
 642:	28 2f       	mov	r18, r24
 644:	22 95       	swap	r18
 646:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char temp = ((high & 0b00001000) << 1) | (high & 0b00000111);			//0001 0111
 648:	92 2f       	mov	r25, r18
 64a:	98 70       	andi	r25, 0x08	; 8
 64c:	49 2f       	mov	r20, r25
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	44 0f       	add	r20, r20
 652:	55 1f       	adc	r21, r21
 654:	27 70       	andi	r18, 0x07	; 7
 656:	42 2b       	or	r20, r18
	PORTB |= temp;
 658:	98 b3       	in	r25, 0x18	; 24
 65a:	49 2b       	or	r20, r25
 65c:	48 bb       	out	0x18, r20	; 24
	
	CLR_BIT(PORTA, 2);
 65e:	9b b3       	in	r25, 0x1b	; 27
 660:	9b 7f       	andi	r25, 0xFB	; 251
 662:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(PORTA, 2);
 664:	9b b3       	in	r25, 0x1b	; 27
 666:	94 60       	ori	r25, 0x04	; 4
 668:	9b bb       	out	0x1b, r25	; 27
 66a:	ef e9       	ldi	r30, 0x9F	; 159
 66c:	ff e0       	ldi	r31, 0x0F	; 15
 66e:	31 97       	sbiw	r30, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <LCD_char+0x38>
 672:	00 c0       	rjmp	.+0      	; 0x674 <LCD_char+0x3e>
 674:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 676:	9b b3       	in	r25, 0x1b	; 27
 678:	9b 7f       	andi	r25, 0xFB	; 251
 67a:	9b bb       	out	0x1b, r25	; 27
	
	
	PORTB &= 0b11101000;
 67c:	98 b3       	in	r25, 0x18	; 24
 67e:	98 7e       	andi	r25, 0xE8	; 232
 680:	98 bb       	out	0x18, r25	; 24
	unsigned char low = chr & 0x0f;
	unsigned char temp2 = ((low & 0b00001000) << 1) | (low & 0b00000111);
 682:	98 2f       	mov	r25, r24
 684:	98 70       	andi	r25, 0x08	; 8
 686:	29 2f       	mov	r18, r25
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	22 0f       	add	r18, r18
 68c:	33 1f       	adc	r19, r19
 68e:	87 70       	andi	r24, 0x07	; 7
 690:	28 2b       	or	r18, r24
	PORTB |= temp2;
 692:	88 b3       	in	r24, 0x18	; 24
 694:	28 2b       	or	r18, r24
 696:	28 bb       	out	0x18, r18	; 24
	
	CLR_BIT(PORTA, 2);
 698:	8b b3       	in	r24, 0x1b	; 27
 69a:	8b 7f       	andi	r24, 0xFB	; 251
 69c:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA, 2);
 69e:	8b b3       	in	r24, 0x1b	; 27
 6a0:	84 60       	ori	r24, 0x04	; 4
 6a2:	8b bb       	out	0x1b, r24	; 27
 6a4:	8f e9       	ldi	r24, 0x9F	; 159
 6a6:	9f e0       	ldi	r25, 0x0F	; 15
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <LCD_char+0x72>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <LCD_char+0x78>
 6ae:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 6b0:	8b b3       	in	r24, 0x1b	; 27
 6b2:	8b 7f       	andi	r24, 0xFB	; 251
 6b4:	8b bb       	out	0x1b, r24	; 27
 6b6:	ef e1       	ldi	r30, 0x1F	; 31
 6b8:	fe e4       	ldi	r31, 0x4E	; 78
 6ba:	31 97       	sbiw	r30, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <LCD_char+0x84>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <LCD_char+0x8a>
 6c0:	00 00       	nop
 6c2:	08 95       	ret

000006c4 <LCD_string>:
	_delay_ms(5);

}

void LCD_string(char* str)
{
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++)
 6ce:	c0 e0       	ldi	r28, 0x00	; 0
 6d0:	d0 e0       	ldi	r29, 0x00	; 0
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <LCD_string+0x16>
	{
		LCD_char(str[i]);
 6d4:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_char>

}

void LCD_string(char* str)
{
	for (int i = 0; str[i]; i++)
 6d8:	21 96       	adiw	r28, 0x01	; 1
 6da:	f8 01       	movw	r30, r16
 6dc:	ec 0f       	add	r30, r28
 6de:	fd 1f       	adc	r31, r29
 6e0:	80 81       	ld	r24, Z
 6e2:	81 11       	cpse	r24, r1
 6e4:	f7 cf       	rjmp	.-18     	; 0x6d4 <LCD_string+0x10>
	{
		LCD_char(str[i]);
	}
}
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	08 95       	ret

000006f0 <LCD_clear>:

void LCD_clear()
{
	LCD_command(0x01);
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_command>
 6f6:	8f e3       	ldi	r24, 0x3F	; 63
 6f8:	9c e9       	ldi	r25, 0x9C	; 156
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <LCD_clear+0xa>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <LCD_clear+0x10>
 700:	00 00       	nop
 702:	08 95       	ret

00000704 <LCD_gotoxy>:
}

void LCD_gotoxy(unsigned char row, unsigned char col)
{
	unsigned char address = 0;
	switch(row)
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	39 f0       	breq	.+14     	; 0x716 <LCD_gotoxy+0x12>
 708:	58 f0       	brcs	.+22     	; 0x720 <LCD_gotoxy+0x1c>
 70a:	82 30       	cpi	r24, 0x02	; 2
 70c:	31 f0       	breq	.+12     	; 0x71a <LCD_gotoxy+0x16>
 70e:	83 30       	cpi	r24, 0x03	; 3
 710:	31 f0       	breq	.+12     	; 0x71e <LCD_gotoxy+0x1a>
	_delay_ms(10);
}

void LCD_gotoxy(unsigned char row, unsigned char col)
{
	unsigned char address = 0;
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	05 c0       	rjmp	.+10     	; 0x720 <LCD_gotoxy+0x1c>
	{
		case 0:
		address = col;
		break;
		case 1:
		address = col + 0x40;
 716:	60 5c       	subi	r22, 0xC0	; 192
		break;
 718:	03 c0       	rjmp	.+6      	; 0x720 <LCD_gotoxy+0x1c>
		case 2:
		address = col + 0x14;
 71a:	6c 5e       	subi	r22, 0xEC	; 236
		break;
 71c:	01 c0       	rjmp	.+2      	; 0x720 <LCD_gotoxy+0x1c>
		case 3:
		address = col + 0x54;
 71e:	6c 5a       	subi	r22, 0xAC	; 172
		break;
	}
	LCD_command(address | 0x80);
 720:	86 2f       	mov	r24, r22
 722:	80 68       	ori	r24, 0x80	; 128
 724:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_command>
 728:	08 95       	ret

0000072a <led_init>:
#include "led.h"

void led_init()
{
	SET_BIT(DDRB, 7);
 72a:	87 b3       	in	r24, 0x17	; 23
 72c:	80 68       	ori	r24, 0x80	; 128
 72e:	87 bb       	out	0x17, r24	; 23
 730:	08 95       	ret

00000732 <led_on>:
}

void led_on()
{
	SET_BIT(PORTB, 7);
 732:	88 b3       	in	r24, 0x18	; 24
 734:	80 68       	ori	r24, 0x80	; 128
 736:	88 bb       	out	0x18, r24	; 24
 738:	08 95       	ret

0000073a <led_of>:
}

void led_of()
{
	CLR_BIT(PORTB, 7);
 73a:	88 b3       	in	r24, 0x18	; 24
 73c:	8f 77       	andi	r24, 0x7F	; 127
 73e:	88 bb       	out	0x18, r24	; 24
 740:	08 95       	ret

00000742 <main>:
#include "Alarm_Clock.h"

int main(void)
{
	// Initiation:
	keypad_init();
 742:	0e 94 18 02 	call	0x430	; 0x430 <keypad_init>
	LCD_init();
 746:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_init>
	alarm_init();
 74a:	0e 94 15 01 	call	0x22a	; 0x22a <alarm_init>
	clock_init();
 74e:	0e 94 1a 01 	call	0x234	; 0x234 <clock_init>
	timer0_init();
 752:	0e 94 b6 03 	call	0x76c	; 0x76c <timer0_init>
	led_init();
 756:	0e 94 95 03 	call	0x72a	; 0x72a <led_init>
	
 	// Calling:
	clock_adjust();
 75a:	0e 94 47 01 	call	0x28e	; 0x28e <clock_adjust>
	timer0_setCallback(every_second);
 75e:	82 ef       	ldi	r24, 0xF2	; 242
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	0e 94 be 03 	call	0x77c	; 0x77c <timer0_setCallback>
    while (1)
    {
	    buttons_checking();
 766:	0e 94 cb 01 	call	0x396	; 0x396 <buttons_checking>
 76a:	fd cf       	rjmp	.-6      	; 0x766 <main+0x24>

0000076c <timer0_init>:
#include "timer0.h"

void timer0_init()
{
	TCNT0 = 0;                // timer initial value
 76c:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << TOIE0);    // enable overflow interrupt
 76e:	89 b7       	in	r24, 0x39	; 57
 770:	81 60       	ori	r24, 0x01	; 1
 772:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (1 << FOC0) | (1 << CS02) | (1 << CS00);
 774:	85 e8       	ldi	r24, 0x85	; 133
 776:	83 bf       	out	0x33, r24	; 51
	sei();
 778:	78 94       	sei
 77a:	08 95       	ret

0000077c <timer0_setCallback>:
}

void (*globalCallback)(void) = NULL_PTR;
void timer0_setCallback(void (*callback)(void))
{
	globalCallback = callback;
 77c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <globalCallback+0x1>
 780:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <globalCallback>
 784:	08 95       	ret

00000786 <__vector_11>:
}

ISR(TIMER0_OVF_vect)
{
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	2f 93       	push	r18
 792:	3f 93       	push	r19
 794:	4f 93       	push	r20
 796:	5f 93       	push	r21
 798:	6f 93       	push	r22
 79a:	7f 93       	push	r23
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
 7a0:	af 93       	push	r26
 7a2:	bf 93       	push	r27
 7a4:	ef 93       	push	r30
 7a6:	ff 93       	push	r31
	if (globalCallback)
 7a8:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <globalCallback>
 7ac:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <globalCallback+0x1>
 7b0:	30 97       	sbiw	r30, 0x00	; 0
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <__vector_11+0x30>
	{
		globalCallback();
 7b4:	09 95       	icall
	}
}
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <timer0_start>:

void timer0_start()
{
	// Set the prescaler to start the timer
	TCCR0 |= (1 << CS02) | (1 << CS00);
 7d8:	83 b7       	in	r24, 0x33	; 51
 7da:	85 60       	ori	r24, 0x05	; 5
 7dc:	83 bf       	out	0x33, r24	; 51
 7de:	08 95       	ret

000007e0 <timer0_stop>:
}

void timer0_stop()
{
	// Clear the prescaler to stop the timer
	TCCR0 &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
 7e0:	83 b7       	in	r24, 0x33	; 51
 7e2:	88 7f       	andi	r24, 0xF8	; 248
 7e4:	83 bf       	out	0x33, r24	; 51
 7e6:	08 95       	ret

000007e8 <strcmp>:
 7e8:	fb 01       	movw	r30, r22
 7ea:	dc 01       	movw	r26, r24
 7ec:	8d 91       	ld	r24, X+
 7ee:	01 90       	ld	r0, Z+
 7f0:	80 19       	sub	r24, r0
 7f2:	01 10       	cpse	r0, r1
 7f4:	d9 f3       	breq	.-10     	; 0x7ec <strcmp+0x4>
 7f6:	99 0b       	sbc	r25, r25
 7f8:	08 95       	ret

000007fa <sprintf>:
 7fa:	ae e0       	ldi	r26, 0x0E	; 14
 7fc:	b0 e0       	ldi	r27, 0x00	; 0
 7fe:	e3 e0       	ldi	r30, 0x03	; 3
 800:	f4 e0       	ldi	r31, 0x04	; 4
 802:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__prologue_saves__+0x1c>
 806:	0d 89       	ldd	r16, Y+21	; 0x15
 808:	1e 89       	ldd	r17, Y+22	; 0x16
 80a:	86 e0       	ldi	r24, 0x06	; 6
 80c:	8c 83       	std	Y+4, r24	; 0x04
 80e:	1a 83       	std	Y+2, r17	; 0x02
 810:	09 83       	std	Y+1, r16	; 0x01
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	9f e7       	ldi	r25, 0x7F	; 127
 816:	9e 83       	std	Y+6, r25	; 0x06
 818:	8d 83       	std	Y+5, r24	; 0x05
 81a:	ae 01       	movw	r20, r28
 81c:	47 5e       	subi	r20, 0xE7	; 231
 81e:	5f 4f       	sbci	r21, 0xFF	; 255
 820:	6f 89       	ldd	r22, Y+23	; 0x17
 822:	78 8d       	ldd	r23, Y+24	; 0x18
 824:	ce 01       	movw	r24, r28
 826:	01 96       	adiw	r24, 0x01	; 1
 828:	0e 94 1f 04 	call	0x83e	; 0x83e <vfprintf>
 82c:	ef 81       	ldd	r30, Y+7	; 0x07
 82e:	f8 85       	ldd	r31, Y+8	; 0x08
 830:	e0 0f       	add	r30, r16
 832:	f1 1f       	adc	r31, r17
 834:	10 82       	st	Z, r1
 836:	2e 96       	adiw	r28, 0x0e	; 14
 838:	e4 e0       	ldi	r30, 0x04	; 4
 83a:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__epilogue_restores__+0x1c>

0000083e <vfprintf>:
 83e:	ab e0       	ldi	r26, 0x0B	; 11
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	e5 e2       	ldi	r30, 0x25	; 37
 844:	f4 e0       	ldi	r31, 0x04	; 4
 846:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__prologue_saves__>
 84a:	6c 01       	movw	r12, r24
 84c:	7b 01       	movw	r14, r22
 84e:	8a 01       	movw	r16, r20
 850:	fc 01       	movw	r30, r24
 852:	17 82       	std	Z+7, r1	; 0x07
 854:	16 82       	std	Z+6, r1	; 0x06
 856:	83 81       	ldd	r24, Z+3	; 0x03
 858:	81 ff       	sbrs	r24, 1
 85a:	cc c1       	rjmp	.+920    	; 0xbf4 <__stack+0x395>
 85c:	ce 01       	movw	r24, r28
 85e:	01 96       	adiw	r24, 0x01	; 1
 860:	3c 01       	movw	r6, r24
 862:	f6 01       	movw	r30, r12
 864:	93 81       	ldd	r25, Z+3	; 0x03
 866:	f7 01       	movw	r30, r14
 868:	93 fd       	sbrc	r25, 3
 86a:	85 91       	lpm	r24, Z+
 86c:	93 ff       	sbrs	r25, 3
 86e:	81 91       	ld	r24, Z+
 870:	7f 01       	movw	r14, r30
 872:	88 23       	and	r24, r24
 874:	09 f4       	brne	.+2      	; 0x878 <__stack+0x19>
 876:	ba c1       	rjmp	.+884    	; 0xbec <__stack+0x38d>
 878:	85 32       	cpi	r24, 0x25	; 37
 87a:	39 f4       	brne	.+14     	; 0x88a <__stack+0x2b>
 87c:	93 fd       	sbrc	r25, 3
 87e:	85 91       	lpm	r24, Z+
 880:	93 ff       	sbrs	r25, 3
 882:	81 91       	ld	r24, Z+
 884:	7f 01       	movw	r14, r30
 886:	85 32       	cpi	r24, 0x25	; 37
 888:	29 f4       	brne	.+10     	; 0x894 <__stack+0x35>
 88a:	b6 01       	movw	r22, r12
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 16 06 	call	0xc2c	; 0xc2c <fputc>
 892:	e7 cf       	rjmp	.-50     	; 0x862 <__stack+0x3>
 894:	91 2c       	mov	r9, r1
 896:	21 2c       	mov	r2, r1
 898:	31 2c       	mov	r3, r1
 89a:	ff e1       	ldi	r31, 0x1F	; 31
 89c:	f3 15       	cp	r31, r3
 89e:	d8 f0       	brcs	.+54     	; 0x8d6 <__stack+0x77>
 8a0:	8b 32       	cpi	r24, 0x2B	; 43
 8a2:	79 f0       	breq	.+30     	; 0x8c2 <__stack+0x63>
 8a4:	38 f4       	brcc	.+14     	; 0x8b4 <__stack+0x55>
 8a6:	80 32       	cpi	r24, 0x20	; 32
 8a8:	79 f0       	breq	.+30     	; 0x8c8 <__stack+0x69>
 8aa:	83 32       	cpi	r24, 0x23	; 35
 8ac:	a1 f4       	brne	.+40     	; 0x8d6 <__stack+0x77>
 8ae:	23 2d       	mov	r18, r3
 8b0:	20 61       	ori	r18, 0x10	; 16
 8b2:	1d c0       	rjmp	.+58     	; 0x8ee <__stack+0x8f>
 8b4:	8d 32       	cpi	r24, 0x2D	; 45
 8b6:	61 f0       	breq	.+24     	; 0x8d0 <__stack+0x71>
 8b8:	80 33       	cpi	r24, 0x30	; 48
 8ba:	69 f4       	brne	.+26     	; 0x8d6 <__stack+0x77>
 8bc:	23 2d       	mov	r18, r3
 8be:	21 60       	ori	r18, 0x01	; 1
 8c0:	16 c0       	rjmp	.+44     	; 0x8ee <__stack+0x8f>
 8c2:	83 2d       	mov	r24, r3
 8c4:	82 60       	ori	r24, 0x02	; 2
 8c6:	38 2e       	mov	r3, r24
 8c8:	e3 2d       	mov	r30, r3
 8ca:	e4 60       	ori	r30, 0x04	; 4
 8cc:	3e 2e       	mov	r3, r30
 8ce:	2a c0       	rjmp	.+84     	; 0x924 <__stack+0xc5>
 8d0:	f3 2d       	mov	r31, r3
 8d2:	f8 60       	ori	r31, 0x08	; 8
 8d4:	1d c0       	rjmp	.+58     	; 0x910 <__stack+0xb1>
 8d6:	37 fc       	sbrc	r3, 7
 8d8:	2d c0       	rjmp	.+90     	; 0x934 <__stack+0xd5>
 8da:	20 ed       	ldi	r18, 0xD0	; 208
 8dc:	28 0f       	add	r18, r24
 8de:	2a 30       	cpi	r18, 0x0A	; 10
 8e0:	40 f0       	brcs	.+16     	; 0x8f2 <__stack+0x93>
 8e2:	8e 32       	cpi	r24, 0x2E	; 46
 8e4:	b9 f4       	brne	.+46     	; 0x914 <__stack+0xb5>
 8e6:	36 fc       	sbrc	r3, 6
 8e8:	81 c1       	rjmp	.+770    	; 0xbec <__stack+0x38d>
 8ea:	23 2d       	mov	r18, r3
 8ec:	20 64       	ori	r18, 0x40	; 64
 8ee:	32 2e       	mov	r3, r18
 8f0:	19 c0       	rjmp	.+50     	; 0x924 <__stack+0xc5>
 8f2:	36 fe       	sbrs	r3, 6
 8f4:	06 c0       	rjmp	.+12     	; 0x902 <__stack+0xa3>
 8f6:	8a e0       	ldi	r24, 0x0A	; 10
 8f8:	98 9e       	mul	r9, r24
 8fa:	20 0d       	add	r18, r0
 8fc:	11 24       	eor	r1, r1
 8fe:	92 2e       	mov	r9, r18
 900:	11 c0       	rjmp	.+34     	; 0x924 <__stack+0xc5>
 902:	ea e0       	ldi	r30, 0x0A	; 10
 904:	2e 9e       	mul	r2, r30
 906:	20 0d       	add	r18, r0
 908:	11 24       	eor	r1, r1
 90a:	22 2e       	mov	r2, r18
 90c:	f3 2d       	mov	r31, r3
 90e:	f0 62       	ori	r31, 0x20	; 32
 910:	3f 2e       	mov	r3, r31
 912:	08 c0       	rjmp	.+16     	; 0x924 <__stack+0xc5>
 914:	8c 36       	cpi	r24, 0x6C	; 108
 916:	21 f4       	brne	.+8      	; 0x920 <__stack+0xc1>
 918:	83 2d       	mov	r24, r3
 91a:	80 68       	ori	r24, 0x80	; 128
 91c:	38 2e       	mov	r3, r24
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
 920:	88 36       	cpi	r24, 0x68	; 104
 922:	41 f4       	brne	.+16     	; 0x934 <__stack+0xd5>
 924:	f7 01       	movw	r30, r14
 926:	93 fd       	sbrc	r25, 3
 928:	85 91       	lpm	r24, Z+
 92a:	93 ff       	sbrs	r25, 3
 92c:	81 91       	ld	r24, Z+
 92e:	7f 01       	movw	r14, r30
 930:	81 11       	cpse	r24, r1
 932:	b3 cf       	rjmp	.-154    	; 0x89a <__stack+0x3b>
 934:	98 2f       	mov	r25, r24
 936:	9f 7d       	andi	r25, 0xDF	; 223
 938:	95 54       	subi	r25, 0x45	; 69
 93a:	93 30       	cpi	r25, 0x03	; 3
 93c:	28 f4       	brcc	.+10     	; 0x948 <__stack+0xe9>
 93e:	0c 5f       	subi	r16, 0xFC	; 252
 940:	1f 4f       	sbci	r17, 0xFF	; 255
 942:	9f e3       	ldi	r25, 0x3F	; 63
 944:	99 83       	std	Y+1, r25	; 0x01
 946:	0d c0       	rjmp	.+26     	; 0x962 <__stack+0x103>
 948:	83 36       	cpi	r24, 0x63	; 99
 94a:	31 f0       	breq	.+12     	; 0x958 <__stack+0xf9>
 94c:	83 37       	cpi	r24, 0x73	; 115
 94e:	71 f0       	breq	.+28     	; 0x96c <__stack+0x10d>
 950:	83 35       	cpi	r24, 0x53	; 83
 952:	09 f0       	breq	.+2      	; 0x956 <__stack+0xf7>
 954:	59 c0       	rjmp	.+178    	; 0xa08 <__stack+0x1a9>
 956:	21 c0       	rjmp	.+66     	; 0x99a <__stack+0x13b>
 958:	f8 01       	movw	r30, r16
 95a:	80 81       	ld	r24, Z
 95c:	89 83       	std	Y+1, r24	; 0x01
 95e:	0e 5f       	subi	r16, 0xFE	; 254
 960:	1f 4f       	sbci	r17, 0xFF	; 255
 962:	88 24       	eor	r8, r8
 964:	83 94       	inc	r8
 966:	91 2c       	mov	r9, r1
 968:	53 01       	movw	r10, r6
 96a:	13 c0       	rjmp	.+38     	; 0x992 <__stack+0x133>
 96c:	28 01       	movw	r4, r16
 96e:	f2 e0       	ldi	r31, 0x02	; 2
 970:	4f 0e       	add	r4, r31
 972:	51 1c       	adc	r5, r1
 974:	f8 01       	movw	r30, r16
 976:	a0 80       	ld	r10, Z
 978:	b1 80       	ldd	r11, Z+1	; 0x01
 97a:	36 fe       	sbrs	r3, 6
 97c:	03 c0       	rjmp	.+6      	; 0x984 <__stack+0x125>
 97e:	69 2d       	mov	r22, r9
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	02 c0       	rjmp	.+4      	; 0x988 <__stack+0x129>
 984:	6f ef       	ldi	r22, 0xFF	; 255
 986:	7f ef       	ldi	r23, 0xFF	; 255
 988:	c5 01       	movw	r24, r10
 98a:	0e 94 0b 06 	call	0xc16	; 0xc16 <strnlen>
 98e:	4c 01       	movw	r8, r24
 990:	82 01       	movw	r16, r4
 992:	f3 2d       	mov	r31, r3
 994:	ff 77       	andi	r31, 0x7F	; 127
 996:	3f 2e       	mov	r3, r31
 998:	16 c0       	rjmp	.+44     	; 0x9c6 <__stack+0x167>
 99a:	28 01       	movw	r4, r16
 99c:	22 e0       	ldi	r18, 0x02	; 2
 99e:	42 0e       	add	r4, r18
 9a0:	51 1c       	adc	r5, r1
 9a2:	f8 01       	movw	r30, r16
 9a4:	a0 80       	ld	r10, Z
 9a6:	b1 80       	ldd	r11, Z+1	; 0x01
 9a8:	36 fe       	sbrs	r3, 6
 9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <__stack+0x153>
 9ac:	69 2d       	mov	r22, r9
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0x157>
 9b2:	6f ef       	ldi	r22, 0xFF	; 255
 9b4:	7f ef       	ldi	r23, 0xFF	; 255
 9b6:	c5 01       	movw	r24, r10
 9b8:	0e 94 00 06 	call	0xc00	; 0xc00 <strnlen_P>
 9bc:	4c 01       	movw	r8, r24
 9be:	f3 2d       	mov	r31, r3
 9c0:	f0 68       	ori	r31, 0x80	; 128
 9c2:	3f 2e       	mov	r3, r31
 9c4:	82 01       	movw	r16, r4
 9c6:	33 fc       	sbrc	r3, 3
 9c8:	1b c0       	rjmp	.+54     	; 0xa00 <__stack+0x1a1>
 9ca:	82 2d       	mov	r24, r2
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	88 16       	cp	r8, r24
 9d0:	99 06       	cpc	r9, r25
 9d2:	b0 f4       	brcc	.+44     	; 0xa00 <__stack+0x1a1>
 9d4:	b6 01       	movw	r22, r12
 9d6:	80 e2       	ldi	r24, 0x20	; 32
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 16 06 	call	0xc2c	; 0xc2c <fputc>
 9de:	2a 94       	dec	r2
 9e0:	f4 cf       	rjmp	.-24     	; 0x9ca <__stack+0x16b>
 9e2:	f5 01       	movw	r30, r10
 9e4:	37 fc       	sbrc	r3, 7
 9e6:	85 91       	lpm	r24, Z+
 9e8:	37 fe       	sbrs	r3, 7
 9ea:	81 91       	ld	r24, Z+
 9ec:	5f 01       	movw	r10, r30
 9ee:	b6 01       	movw	r22, r12
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 16 06 	call	0xc2c	; 0xc2c <fputc>
 9f6:	21 10       	cpse	r2, r1
 9f8:	2a 94       	dec	r2
 9fa:	21 e0       	ldi	r18, 0x01	; 1
 9fc:	82 1a       	sub	r8, r18
 9fe:	91 08       	sbc	r9, r1
 a00:	81 14       	cp	r8, r1
 a02:	91 04       	cpc	r9, r1
 a04:	71 f7       	brne	.-36     	; 0x9e2 <__stack+0x183>
 a06:	e8 c0       	rjmp	.+464    	; 0xbd8 <__stack+0x379>
 a08:	84 36       	cpi	r24, 0x64	; 100
 a0a:	11 f0       	breq	.+4      	; 0xa10 <__stack+0x1b1>
 a0c:	89 36       	cpi	r24, 0x69	; 105
 a0e:	41 f5       	brne	.+80     	; 0xa60 <__stack+0x201>
 a10:	f8 01       	movw	r30, r16
 a12:	37 fe       	sbrs	r3, 7
 a14:	07 c0       	rjmp	.+14     	; 0xa24 <__stack+0x1c5>
 a16:	60 81       	ld	r22, Z
 a18:	71 81       	ldd	r23, Z+1	; 0x01
 a1a:	82 81       	ldd	r24, Z+2	; 0x02
 a1c:	93 81       	ldd	r25, Z+3	; 0x03
 a1e:	0c 5f       	subi	r16, 0xFC	; 252
 a20:	1f 4f       	sbci	r17, 0xFF	; 255
 a22:	08 c0       	rjmp	.+16     	; 0xa34 <__stack+0x1d5>
 a24:	60 81       	ld	r22, Z
 a26:	71 81       	ldd	r23, Z+1	; 0x01
 a28:	07 2e       	mov	r0, r23
 a2a:	00 0c       	add	r0, r0
 a2c:	88 0b       	sbc	r24, r24
 a2e:	99 0b       	sbc	r25, r25
 a30:	0e 5f       	subi	r16, 0xFE	; 254
 a32:	1f 4f       	sbci	r17, 0xFF	; 255
 a34:	f3 2d       	mov	r31, r3
 a36:	ff 76       	andi	r31, 0x6F	; 111
 a38:	3f 2e       	mov	r3, r31
 a3a:	97 ff       	sbrs	r25, 7
 a3c:	09 c0       	rjmp	.+18     	; 0xa50 <__stack+0x1f1>
 a3e:	90 95       	com	r25
 a40:	80 95       	com	r24
 a42:	70 95       	com	r23
 a44:	61 95       	neg	r22
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	8f 4f       	sbci	r24, 0xFF	; 255
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	f0 68       	ori	r31, 0x80	; 128
 a4e:	3f 2e       	mov	r3, r31
 a50:	2a e0       	ldi	r18, 0x0A	; 10
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	a3 01       	movw	r20, r6
 a56:	0e 94 52 06 	call	0xca4	; 0xca4 <__ultoa_invert>
 a5a:	88 2e       	mov	r8, r24
 a5c:	86 18       	sub	r8, r6
 a5e:	45 c0       	rjmp	.+138    	; 0xaea <__stack+0x28b>
 a60:	85 37       	cpi	r24, 0x75	; 117
 a62:	31 f4       	brne	.+12     	; 0xa70 <__stack+0x211>
 a64:	23 2d       	mov	r18, r3
 a66:	2f 7e       	andi	r18, 0xEF	; 239
 a68:	b2 2e       	mov	r11, r18
 a6a:	2a e0       	ldi	r18, 0x0A	; 10
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	25 c0       	rjmp	.+74     	; 0xaba <__stack+0x25b>
 a70:	93 2d       	mov	r25, r3
 a72:	99 7f       	andi	r25, 0xF9	; 249
 a74:	b9 2e       	mov	r11, r25
 a76:	8f 36       	cpi	r24, 0x6F	; 111
 a78:	c1 f0       	breq	.+48     	; 0xaaa <__stack+0x24b>
 a7a:	18 f4       	brcc	.+6      	; 0xa82 <__stack+0x223>
 a7c:	88 35       	cpi	r24, 0x58	; 88
 a7e:	79 f0       	breq	.+30     	; 0xa9e <__stack+0x23f>
 a80:	b5 c0       	rjmp	.+362    	; 0xbec <__stack+0x38d>
 a82:	80 37       	cpi	r24, 0x70	; 112
 a84:	19 f0       	breq	.+6      	; 0xa8c <__stack+0x22d>
 a86:	88 37       	cpi	r24, 0x78	; 120
 a88:	21 f0       	breq	.+8      	; 0xa92 <__stack+0x233>
 a8a:	b0 c0       	rjmp	.+352    	; 0xbec <__stack+0x38d>
 a8c:	e9 2f       	mov	r30, r25
 a8e:	e0 61       	ori	r30, 0x10	; 16
 a90:	be 2e       	mov	r11, r30
 a92:	b4 fe       	sbrs	r11, 4
 a94:	0d c0       	rjmp	.+26     	; 0xab0 <__stack+0x251>
 a96:	fb 2d       	mov	r31, r11
 a98:	f4 60       	ori	r31, 0x04	; 4
 a9a:	bf 2e       	mov	r11, r31
 a9c:	09 c0       	rjmp	.+18     	; 0xab0 <__stack+0x251>
 a9e:	34 fe       	sbrs	r3, 4
 aa0:	0a c0       	rjmp	.+20     	; 0xab6 <__stack+0x257>
 aa2:	29 2f       	mov	r18, r25
 aa4:	26 60       	ori	r18, 0x06	; 6
 aa6:	b2 2e       	mov	r11, r18
 aa8:	06 c0       	rjmp	.+12     	; 0xab6 <__stack+0x257>
 aaa:	28 e0       	ldi	r18, 0x08	; 8
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	05 c0       	rjmp	.+10     	; 0xaba <__stack+0x25b>
 ab0:	20 e1       	ldi	r18, 0x10	; 16
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <__stack+0x25b>
 ab6:	20 e1       	ldi	r18, 0x10	; 16
 ab8:	32 e0       	ldi	r19, 0x02	; 2
 aba:	f8 01       	movw	r30, r16
 abc:	b7 fe       	sbrs	r11, 7
 abe:	07 c0       	rjmp	.+14     	; 0xace <__stack+0x26f>
 ac0:	60 81       	ld	r22, Z
 ac2:	71 81       	ldd	r23, Z+1	; 0x01
 ac4:	82 81       	ldd	r24, Z+2	; 0x02
 ac6:	93 81       	ldd	r25, Z+3	; 0x03
 ac8:	0c 5f       	subi	r16, 0xFC	; 252
 aca:	1f 4f       	sbci	r17, 0xFF	; 255
 acc:	06 c0       	rjmp	.+12     	; 0xada <__stack+0x27b>
 ace:	60 81       	ld	r22, Z
 ad0:	71 81       	ldd	r23, Z+1	; 0x01
 ad2:	80 e0       	ldi	r24, 0x00	; 0
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 5f       	subi	r16, 0xFE	; 254
 ad8:	1f 4f       	sbci	r17, 0xFF	; 255
 ada:	a3 01       	movw	r20, r6
 adc:	0e 94 52 06 	call	0xca4	; 0xca4 <__ultoa_invert>
 ae0:	88 2e       	mov	r8, r24
 ae2:	86 18       	sub	r8, r6
 ae4:	fb 2d       	mov	r31, r11
 ae6:	ff 77       	andi	r31, 0x7F	; 127
 ae8:	3f 2e       	mov	r3, r31
 aea:	36 fe       	sbrs	r3, 6
 aec:	0d c0       	rjmp	.+26     	; 0xb08 <__stack+0x2a9>
 aee:	23 2d       	mov	r18, r3
 af0:	2e 7f       	andi	r18, 0xFE	; 254
 af2:	a2 2e       	mov	r10, r18
 af4:	89 14       	cp	r8, r9
 af6:	58 f4       	brcc	.+22     	; 0xb0e <__stack+0x2af>
 af8:	34 fe       	sbrs	r3, 4
 afa:	0b c0       	rjmp	.+22     	; 0xb12 <__stack+0x2b3>
 afc:	32 fc       	sbrc	r3, 2
 afe:	09 c0       	rjmp	.+18     	; 0xb12 <__stack+0x2b3>
 b00:	83 2d       	mov	r24, r3
 b02:	8e 7e       	andi	r24, 0xEE	; 238
 b04:	a8 2e       	mov	r10, r24
 b06:	05 c0       	rjmp	.+10     	; 0xb12 <__stack+0x2b3>
 b08:	b8 2c       	mov	r11, r8
 b0a:	a3 2c       	mov	r10, r3
 b0c:	03 c0       	rjmp	.+6      	; 0xb14 <__stack+0x2b5>
 b0e:	b8 2c       	mov	r11, r8
 b10:	01 c0       	rjmp	.+2      	; 0xb14 <__stack+0x2b5>
 b12:	b9 2c       	mov	r11, r9
 b14:	a4 fe       	sbrs	r10, 4
 b16:	0f c0       	rjmp	.+30     	; 0xb36 <__stack+0x2d7>
 b18:	fe 01       	movw	r30, r28
 b1a:	e8 0d       	add	r30, r8
 b1c:	f1 1d       	adc	r31, r1
 b1e:	80 81       	ld	r24, Z
 b20:	80 33       	cpi	r24, 0x30	; 48
 b22:	21 f4       	brne	.+8      	; 0xb2c <__stack+0x2cd>
 b24:	9a 2d       	mov	r25, r10
 b26:	99 7e       	andi	r25, 0xE9	; 233
 b28:	a9 2e       	mov	r10, r25
 b2a:	09 c0       	rjmp	.+18     	; 0xb3e <__stack+0x2df>
 b2c:	a2 fe       	sbrs	r10, 2
 b2e:	06 c0       	rjmp	.+12     	; 0xb3c <__stack+0x2dd>
 b30:	b3 94       	inc	r11
 b32:	b3 94       	inc	r11
 b34:	04 c0       	rjmp	.+8      	; 0xb3e <__stack+0x2df>
 b36:	8a 2d       	mov	r24, r10
 b38:	86 78       	andi	r24, 0x86	; 134
 b3a:	09 f0       	breq	.+2      	; 0xb3e <__stack+0x2df>
 b3c:	b3 94       	inc	r11
 b3e:	a3 fc       	sbrc	r10, 3
 b40:	11 c0       	rjmp	.+34     	; 0xb64 <__stack+0x305>
 b42:	a0 fe       	sbrs	r10, 0
 b44:	06 c0       	rjmp	.+12     	; 0xb52 <__stack+0x2f3>
 b46:	b2 14       	cp	r11, r2
 b48:	88 f4       	brcc	.+34     	; 0xb6c <__stack+0x30d>
 b4a:	28 0c       	add	r2, r8
 b4c:	92 2c       	mov	r9, r2
 b4e:	9b 18       	sub	r9, r11
 b50:	0e c0       	rjmp	.+28     	; 0xb6e <__stack+0x30f>
 b52:	b2 14       	cp	r11, r2
 b54:	60 f4       	brcc	.+24     	; 0xb6e <__stack+0x30f>
 b56:	b6 01       	movw	r22, r12
 b58:	80 e2       	ldi	r24, 0x20	; 32
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	0e 94 16 06 	call	0xc2c	; 0xc2c <fputc>
 b60:	b3 94       	inc	r11
 b62:	f7 cf       	rjmp	.-18     	; 0xb52 <__stack+0x2f3>
 b64:	b2 14       	cp	r11, r2
 b66:	18 f4       	brcc	.+6      	; 0xb6e <__stack+0x30f>
 b68:	2b 18       	sub	r2, r11
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <__stack+0x311>
 b6c:	98 2c       	mov	r9, r8
 b6e:	21 2c       	mov	r2, r1
 b70:	a4 fe       	sbrs	r10, 4
 b72:	10 c0       	rjmp	.+32     	; 0xb94 <__stack+0x335>
 b74:	b6 01       	movw	r22, r12
 b76:	80 e3       	ldi	r24, 0x30	; 48
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	0e 94 16 06 	call	0xc2c	; 0xc2c <fputc>
 b7e:	a2 fe       	sbrs	r10, 2
 b80:	17 c0       	rjmp	.+46     	; 0xbb0 <__stack+0x351>
 b82:	a1 fc       	sbrc	r10, 1
 b84:	03 c0       	rjmp	.+6      	; 0xb8c <__stack+0x32d>
 b86:	88 e7       	ldi	r24, 0x78	; 120
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <__stack+0x331>
 b8c:	88 e5       	ldi	r24, 0x58	; 88
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	b6 01       	movw	r22, r12
 b92:	0c c0       	rjmp	.+24     	; 0xbac <__stack+0x34d>
 b94:	8a 2d       	mov	r24, r10
 b96:	86 78       	andi	r24, 0x86	; 134
 b98:	59 f0       	breq	.+22     	; 0xbb0 <__stack+0x351>
 b9a:	a1 fe       	sbrs	r10, 1
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <__stack+0x343>
 b9e:	8b e2       	ldi	r24, 0x2B	; 43
 ba0:	01 c0       	rjmp	.+2      	; 0xba4 <__stack+0x345>
 ba2:	80 e2       	ldi	r24, 0x20	; 32
 ba4:	a7 fc       	sbrc	r10, 7
 ba6:	8d e2       	ldi	r24, 0x2D	; 45
 ba8:	b6 01       	movw	r22, r12
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e 94 16 06 	call	0xc2c	; 0xc2c <fputc>
 bb0:	89 14       	cp	r8, r9
 bb2:	38 f4       	brcc	.+14     	; 0xbc2 <__stack+0x363>
 bb4:	b6 01       	movw	r22, r12
 bb6:	80 e3       	ldi	r24, 0x30	; 48
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 16 06 	call	0xc2c	; 0xc2c <fputc>
 bbe:	9a 94       	dec	r9
 bc0:	f7 cf       	rjmp	.-18     	; 0xbb0 <__stack+0x351>
 bc2:	8a 94       	dec	r8
 bc4:	f3 01       	movw	r30, r6
 bc6:	e8 0d       	add	r30, r8
 bc8:	f1 1d       	adc	r31, r1
 bca:	80 81       	ld	r24, Z
 bcc:	b6 01       	movw	r22, r12
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	0e 94 16 06 	call	0xc2c	; 0xc2c <fputc>
 bd4:	81 10       	cpse	r8, r1
 bd6:	f5 cf       	rjmp	.-22     	; 0xbc2 <__stack+0x363>
 bd8:	22 20       	and	r2, r2
 bda:	09 f4       	brne	.+2      	; 0xbde <__stack+0x37f>
 bdc:	42 ce       	rjmp	.-892    	; 0x862 <__stack+0x3>
 bde:	b6 01       	movw	r22, r12
 be0:	80 e2       	ldi	r24, 0x20	; 32
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	0e 94 16 06 	call	0xc2c	; 0xc2c <fputc>
 be8:	2a 94       	dec	r2
 bea:	f6 cf       	rjmp	.-20     	; 0xbd8 <__stack+0x379>
 bec:	f6 01       	movw	r30, r12
 bee:	86 81       	ldd	r24, Z+6	; 0x06
 bf0:	97 81       	ldd	r25, Z+7	; 0x07
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <__stack+0x399>
 bf4:	8f ef       	ldi	r24, 0xFF	; 255
 bf6:	9f ef       	ldi	r25, 0xFF	; 255
 bf8:	2b 96       	adiw	r28, 0x0b	; 11
 bfa:	e2 e1       	ldi	r30, 0x12	; 18
 bfc:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__epilogue_restores__>

00000c00 <strnlen_P>:
 c00:	fc 01       	movw	r30, r24
 c02:	05 90       	lpm	r0, Z+
 c04:	61 50       	subi	r22, 0x01	; 1
 c06:	70 40       	sbci	r23, 0x00	; 0
 c08:	01 10       	cpse	r0, r1
 c0a:	d8 f7       	brcc	.-10     	; 0xc02 <strnlen_P+0x2>
 c0c:	80 95       	com	r24
 c0e:	90 95       	com	r25
 c10:	8e 0f       	add	r24, r30
 c12:	9f 1f       	adc	r25, r31
 c14:	08 95       	ret

00000c16 <strnlen>:
 c16:	fc 01       	movw	r30, r24
 c18:	61 50       	subi	r22, 0x01	; 1
 c1a:	70 40       	sbci	r23, 0x00	; 0
 c1c:	01 90       	ld	r0, Z+
 c1e:	01 10       	cpse	r0, r1
 c20:	d8 f7       	brcc	.-10     	; 0xc18 <strnlen+0x2>
 c22:	80 95       	com	r24
 c24:	90 95       	com	r25
 c26:	8e 0f       	add	r24, r30
 c28:	9f 1f       	adc	r25, r31
 c2a:	08 95       	ret

00000c2c <fputc>:
 c2c:	0f 93       	push	r16
 c2e:	1f 93       	push	r17
 c30:	cf 93       	push	r28
 c32:	df 93       	push	r29
 c34:	fb 01       	movw	r30, r22
 c36:	23 81       	ldd	r18, Z+3	; 0x03
 c38:	21 fd       	sbrc	r18, 1
 c3a:	03 c0       	rjmp	.+6      	; 0xc42 <fputc+0x16>
 c3c:	8f ef       	ldi	r24, 0xFF	; 255
 c3e:	9f ef       	ldi	r25, 0xFF	; 255
 c40:	2c c0       	rjmp	.+88     	; 0xc9a <fputc+0x6e>
 c42:	22 ff       	sbrs	r18, 2
 c44:	16 c0       	rjmp	.+44     	; 0xc72 <fputc+0x46>
 c46:	46 81       	ldd	r20, Z+6	; 0x06
 c48:	57 81       	ldd	r21, Z+7	; 0x07
 c4a:	24 81       	ldd	r18, Z+4	; 0x04
 c4c:	35 81       	ldd	r19, Z+5	; 0x05
 c4e:	42 17       	cp	r20, r18
 c50:	53 07       	cpc	r21, r19
 c52:	44 f4       	brge	.+16     	; 0xc64 <fputc+0x38>
 c54:	a0 81       	ld	r26, Z
 c56:	b1 81       	ldd	r27, Z+1	; 0x01
 c58:	9d 01       	movw	r18, r26
 c5a:	2f 5f       	subi	r18, 0xFF	; 255
 c5c:	3f 4f       	sbci	r19, 0xFF	; 255
 c5e:	31 83       	std	Z+1, r19	; 0x01
 c60:	20 83       	st	Z, r18
 c62:	8c 93       	st	X, r24
 c64:	26 81       	ldd	r18, Z+6	; 0x06
 c66:	37 81       	ldd	r19, Z+7	; 0x07
 c68:	2f 5f       	subi	r18, 0xFF	; 255
 c6a:	3f 4f       	sbci	r19, 0xFF	; 255
 c6c:	37 83       	std	Z+7, r19	; 0x07
 c6e:	26 83       	std	Z+6, r18	; 0x06
 c70:	14 c0       	rjmp	.+40     	; 0xc9a <fputc+0x6e>
 c72:	8b 01       	movw	r16, r22
 c74:	ec 01       	movw	r28, r24
 c76:	fb 01       	movw	r30, r22
 c78:	00 84       	ldd	r0, Z+8	; 0x08
 c7a:	f1 85       	ldd	r31, Z+9	; 0x09
 c7c:	e0 2d       	mov	r30, r0
 c7e:	09 95       	icall
 c80:	89 2b       	or	r24, r25
 c82:	e1 f6       	brne	.-72     	; 0xc3c <fputc+0x10>
 c84:	d8 01       	movw	r26, r16
 c86:	16 96       	adiw	r26, 0x06	; 6
 c88:	8d 91       	ld	r24, X+
 c8a:	9c 91       	ld	r25, X
 c8c:	17 97       	sbiw	r26, 0x07	; 7
 c8e:	01 96       	adiw	r24, 0x01	; 1
 c90:	17 96       	adiw	r26, 0x07	; 7
 c92:	9c 93       	st	X, r25
 c94:	8e 93       	st	-X, r24
 c96:	16 97       	sbiw	r26, 0x06	; 6
 c98:	ce 01       	movw	r24, r28
 c9a:	df 91       	pop	r29
 c9c:	cf 91       	pop	r28
 c9e:	1f 91       	pop	r17
 ca0:	0f 91       	pop	r16
 ca2:	08 95       	ret

00000ca4 <__ultoa_invert>:
 ca4:	fa 01       	movw	r30, r20
 ca6:	aa 27       	eor	r26, r26
 ca8:	28 30       	cpi	r18, 0x08	; 8
 caa:	51 f1       	breq	.+84     	; 0xd00 <__ultoa_invert+0x5c>
 cac:	20 31       	cpi	r18, 0x10	; 16
 cae:	81 f1       	breq	.+96     	; 0xd10 <__ultoa_invert+0x6c>
 cb0:	e8 94       	clt
 cb2:	6f 93       	push	r22
 cb4:	6e 7f       	andi	r22, 0xFE	; 254
 cb6:	6e 5f       	subi	r22, 0xFE	; 254
 cb8:	7f 4f       	sbci	r23, 0xFF	; 255
 cba:	8f 4f       	sbci	r24, 0xFF	; 255
 cbc:	9f 4f       	sbci	r25, 0xFF	; 255
 cbe:	af 4f       	sbci	r26, 0xFF	; 255
 cc0:	b1 e0       	ldi	r27, 0x01	; 1
 cc2:	3e d0       	rcall	.+124    	; 0xd40 <__ultoa_invert+0x9c>
 cc4:	b4 e0       	ldi	r27, 0x04	; 4
 cc6:	3c d0       	rcall	.+120    	; 0xd40 <__ultoa_invert+0x9c>
 cc8:	67 0f       	add	r22, r23
 cca:	78 1f       	adc	r23, r24
 ccc:	89 1f       	adc	r24, r25
 cce:	9a 1f       	adc	r25, r26
 cd0:	a1 1d       	adc	r26, r1
 cd2:	68 0f       	add	r22, r24
 cd4:	79 1f       	adc	r23, r25
 cd6:	8a 1f       	adc	r24, r26
 cd8:	91 1d       	adc	r25, r1
 cda:	a1 1d       	adc	r26, r1
 cdc:	6a 0f       	add	r22, r26
 cde:	71 1d       	adc	r23, r1
 ce0:	81 1d       	adc	r24, r1
 ce2:	91 1d       	adc	r25, r1
 ce4:	a1 1d       	adc	r26, r1
 ce6:	20 d0       	rcall	.+64     	; 0xd28 <__ultoa_invert+0x84>
 ce8:	09 f4       	brne	.+2      	; 0xcec <__ultoa_invert+0x48>
 cea:	68 94       	set
 cec:	3f 91       	pop	r19
 cee:	2a e0       	ldi	r18, 0x0A	; 10
 cf0:	26 9f       	mul	r18, r22
 cf2:	11 24       	eor	r1, r1
 cf4:	30 19       	sub	r19, r0
 cf6:	30 5d       	subi	r19, 0xD0	; 208
 cf8:	31 93       	st	Z+, r19
 cfa:	de f6       	brtc	.-74     	; 0xcb2 <__ultoa_invert+0xe>
 cfc:	cf 01       	movw	r24, r30
 cfe:	08 95       	ret
 d00:	46 2f       	mov	r20, r22
 d02:	47 70       	andi	r20, 0x07	; 7
 d04:	40 5d       	subi	r20, 0xD0	; 208
 d06:	41 93       	st	Z+, r20
 d08:	b3 e0       	ldi	r27, 0x03	; 3
 d0a:	0f d0       	rcall	.+30     	; 0xd2a <__ultoa_invert+0x86>
 d0c:	c9 f7       	brne	.-14     	; 0xd00 <__ultoa_invert+0x5c>
 d0e:	f6 cf       	rjmp	.-20     	; 0xcfc <__ultoa_invert+0x58>
 d10:	46 2f       	mov	r20, r22
 d12:	4f 70       	andi	r20, 0x0F	; 15
 d14:	40 5d       	subi	r20, 0xD0	; 208
 d16:	4a 33       	cpi	r20, 0x3A	; 58
 d18:	18 f0       	brcs	.+6      	; 0xd20 <__ultoa_invert+0x7c>
 d1a:	49 5d       	subi	r20, 0xD9	; 217
 d1c:	31 fd       	sbrc	r19, 1
 d1e:	40 52       	subi	r20, 0x20	; 32
 d20:	41 93       	st	Z+, r20
 d22:	02 d0       	rcall	.+4      	; 0xd28 <__ultoa_invert+0x84>
 d24:	a9 f7       	brne	.-22     	; 0xd10 <__ultoa_invert+0x6c>
 d26:	ea cf       	rjmp	.-44     	; 0xcfc <__ultoa_invert+0x58>
 d28:	b4 e0       	ldi	r27, 0x04	; 4
 d2a:	a6 95       	lsr	r26
 d2c:	97 95       	ror	r25
 d2e:	87 95       	ror	r24
 d30:	77 95       	ror	r23
 d32:	67 95       	ror	r22
 d34:	ba 95       	dec	r27
 d36:	c9 f7       	brne	.-14     	; 0xd2a <__ultoa_invert+0x86>
 d38:	00 97       	sbiw	r24, 0x00	; 0
 d3a:	61 05       	cpc	r22, r1
 d3c:	71 05       	cpc	r23, r1
 d3e:	08 95       	ret
 d40:	9b 01       	movw	r18, r22
 d42:	ac 01       	movw	r20, r24
 d44:	0a 2e       	mov	r0, r26
 d46:	06 94       	lsr	r0
 d48:	57 95       	ror	r21
 d4a:	47 95       	ror	r20
 d4c:	37 95       	ror	r19
 d4e:	27 95       	ror	r18
 d50:	ba 95       	dec	r27
 d52:	c9 f7       	brne	.-14     	; 0xd46 <__ultoa_invert+0xa2>
 d54:	62 0f       	add	r22, r18
 d56:	73 1f       	adc	r23, r19
 d58:	84 1f       	adc	r24, r20
 d5a:	95 1f       	adc	r25, r21
 d5c:	a0 1d       	adc	r26, r0
 d5e:	08 95       	ret

00000d60 <__prologue_saves__>:
 d60:	2f 92       	push	r2
 d62:	3f 92       	push	r3
 d64:	4f 92       	push	r4
 d66:	5f 92       	push	r5
 d68:	6f 92       	push	r6
 d6a:	7f 92       	push	r7
 d6c:	8f 92       	push	r8
 d6e:	9f 92       	push	r9
 d70:	af 92       	push	r10
 d72:	bf 92       	push	r11
 d74:	cf 92       	push	r12
 d76:	df 92       	push	r13
 d78:	ef 92       	push	r14
 d7a:	ff 92       	push	r15
 d7c:	0f 93       	push	r16
 d7e:	1f 93       	push	r17
 d80:	cf 93       	push	r28
 d82:	df 93       	push	r29
 d84:	cd b7       	in	r28, 0x3d	; 61
 d86:	de b7       	in	r29, 0x3e	; 62
 d88:	ca 1b       	sub	r28, r26
 d8a:	db 0b       	sbc	r29, r27
 d8c:	0f b6       	in	r0, 0x3f	; 63
 d8e:	f8 94       	cli
 d90:	de bf       	out	0x3e, r29	; 62
 d92:	0f be       	out	0x3f, r0	; 63
 d94:	cd bf       	out	0x3d, r28	; 61
 d96:	09 94       	ijmp

00000d98 <__epilogue_restores__>:
 d98:	2a 88       	ldd	r2, Y+18	; 0x12
 d9a:	39 88       	ldd	r3, Y+17	; 0x11
 d9c:	48 88       	ldd	r4, Y+16	; 0x10
 d9e:	5f 84       	ldd	r5, Y+15	; 0x0f
 da0:	6e 84       	ldd	r6, Y+14	; 0x0e
 da2:	7d 84       	ldd	r7, Y+13	; 0x0d
 da4:	8c 84       	ldd	r8, Y+12	; 0x0c
 da6:	9b 84       	ldd	r9, Y+11	; 0x0b
 da8:	aa 84       	ldd	r10, Y+10	; 0x0a
 daa:	b9 84       	ldd	r11, Y+9	; 0x09
 dac:	c8 84       	ldd	r12, Y+8	; 0x08
 dae:	df 80       	ldd	r13, Y+7	; 0x07
 db0:	ee 80       	ldd	r14, Y+6	; 0x06
 db2:	fd 80       	ldd	r15, Y+5	; 0x05
 db4:	0c 81       	ldd	r16, Y+4	; 0x04
 db6:	1b 81       	ldd	r17, Y+3	; 0x03
 db8:	aa 81       	ldd	r26, Y+2	; 0x02
 dba:	b9 81       	ldd	r27, Y+1	; 0x01
 dbc:	ce 0f       	add	r28, r30
 dbe:	d1 1d       	adc	r29, r1
 dc0:	0f b6       	in	r0, 0x3f	; 63
 dc2:	f8 94       	cli
 dc4:	de bf       	out	0x3e, r29	; 62
 dc6:	0f be       	out	0x3f, r0	; 63
 dc8:	cd bf       	out	0x3d, r28	; 61
 dca:	ed 01       	movw	r28, r26
 dcc:	08 95       	ret

00000dce <_exit>:
 dce:	f8 94       	cli

00000dd0 <__stop_program>:
 dd0:	ff cf       	rjmp	.-2      	; 0xdd0 <__stop_program>
