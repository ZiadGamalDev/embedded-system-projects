
SearchingAlgorithm.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000652  000006e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  00800090  00800090  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d7  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000906  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e7  00000000  00000000  00002271  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000934  00000000  00000000  000032bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003bf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3d       	cpi	r26, 0xD8	; 216
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 01 	call	0x320	; 0x320 <main>
  8a:	0c 94 27 03 	jmp	0x64e	; 0x64e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
#include "keypad.h"

void keypad_init()
{
	DDRC |= 0b00111100;
  92:	84 b3       	in	r24, 0x14	; 20
  94:	8c 63       	ori	r24, 0x3C	; 60
  96:	84 bb       	out	0x14, r24	; 20
	PORTD |= 0b11101000;
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	88 6e       	ori	r24, 0xE8	; 232
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	08 95       	ret

000000a0 <keypad_read>:
}

char keypad_read(void)
{
	CLR_BIT(PORTC, 2);
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	8b 7f       	andi	r24, 0xFB	; 251
  a4:	85 bb       	out	0x15, r24	; 21
	if (!GET_BIT(PIND, 3)) return '+';
  a6:	83 9b       	sbis	0x10, 3	; 16
  a8:	32 c0       	rjmp	.+100    	; 0x10e <keypad_read+0x6e>
	if (!GET_BIT(PIND, 5)) return '=';
  aa:	85 9b       	sbis	0x10, 5	; 16
  ac:	32 c0       	rjmp	.+100    	; 0x112 <keypad_read+0x72>
	if (!GET_BIT(PIND, 6)) return '0';
  ae:	86 9b       	sbis	0x10, 6	; 16
  b0:	32 c0       	rjmp	.+100    	; 0x116 <keypad_read+0x76>
	if (!GET_BIT(PIND, 7)) return '&';
  b2:	87 9b       	sbis	0x10, 7	; 16
  b4:	32 c0       	rjmp	.+100    	; 0x11a <keypad_read+0x7a>
	
	SET_BIT(PORTC, 2);
  b6:	85 b3       	in	r24, 0x15	; 21
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(PORTC, 3);
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	87 7f       	andi	r24, 0xF7	; 247
  c0:	85 bb       	out	0x15, r24	; 21
	if (!GET_BIT(PIND, 3)) return '-';
  c2:	83 9b       	sbis	0x10, 3	; 16
  c4:	2c c0       	rjmp	.+88     	; 0x11e <keypad_read+0x7e>
	if (!GET_BIT(PIND, 5)) return '3';
  c6:	85 9b       	sbis	0x10, 5	; 16
  c8:	2c c0       	rjmp	.+88     	; 0x122 <keypad_read+0x82>
	if (!GET_BIT(PIND, 6)) return '2';
  ca:	86 9b       	sbis	0x10, 6	; 16
  cc:	2c c0       	rjmp	.+88     	; 0x126 <keypad_read+0x86>
	if (!GET_BIT(PIND, 7)) return '1';
  ce:	87 9b       	sbis	0x10, 7	; 16
  d0:	2c c0       	rjmp	.+88     	; 0x12a <keypad_read+0x8a>

	SET_BIT(PORTC, 3);
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(PORTC, 4);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	8f 7e       	andi	r24, 0xEF	; 239
  dc:	85 bb       	out	0x15, r24	; 21
	if (!GET_BIT(PIND, 3)) return '*';
  de:	83 9b       	sbis	0x10, 3	; 16
  e0:	26 c0       	rjmp	.+76     	; 0x12e <keypad_read+0x8e>
	if (!GET_BIT(PIND, 5)) return '6';
  e2:	85 9b       	sbis	0x10, 5	; 16
  e4:	26 c0       	rjmp	.+76     	; 0x132 <keypad_read+0x92>
	if (!GET_BIT(PIND, 6)) return '5';
  e6:	86 9b       	sbis	0x10, 6	; 16
  e8:	26 c0       	rjmp	.+76     	; 0x136 <keypad_read+0x96>
	if (!GET_BIT(PIND, 7)) return '4';
  ea:	87 9b       	sbis	0x10, 7	; 16
  ec:	26 c0       	rjmp	.+76     	; 0x13a <keypad_read+0x9a>
	
	SET_BIT(PORTC, 4);
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(PORTC, 5);
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	8f 7d       	andi	r24, 0xDF	; 223
  f8:	85 bb       	out	0x15, r24	; 21
	if (!GET_BIT(PIND, 3)) return '/';
  fa:	83 9b       	sbis	0x10, 3	; 16
  fc:	20 c0       	rjmp	.+64     	; 0x13e <keypad_read+0x9e>
	if (!GET_BIT(PIND, 5)) return '9';
  fe:	85 9b       	sbis	0x10, 5	; 16
 100:	20 c0       	rjmp	.+64     	; 0x142 <keypad_read+0xa2>
	if (!GET_BIT(PIND, 6)) return '8';
 102:	86 9b       	sbis	0x10, 6	; 16
 104:	20 c0       	rjmp	.+64     	; 0x146 <keypad_read+0xa6>
	if (!GET_BIT(PIND, 7)) return '7';
 106:	87 99       	sbic	0x10, 7	; 16
 108:	20 c0       	rjmp	.+64     	; 0x14a <keypad_read+0xaa>
 10a:	87 e3       	ldi	r24, 0x37	; 55
 10c:	08 95       	ret
}

char keypad_read(void)
{
	CLR_BIT(PORTC, 2);
	if (!GET_BIT(PIND, 3)) return '+';
 10e:	8b e2       	ldi	r24, 0x2B	; 43
 110:	08 95       	ret
	if (!GET_BIT(PIND, 5)) return '=';
 112:	8d e3       	ldi	r24, 0x3D	; 61
 114:	08 95       	ret
	if (!GET_BIT(PIND, 6)) return '0';
 116:	80 e3       	ldi	r24, 0x30	; 48
 118:	08 95       	ret
	if (!GET_BIT(PIND, 7)) return '&';
 11a:	86 e2       	ldi	r24, 0x26	; 38
 11c:	08 95       	ret
	
	SET_BIT(PORTC, 2);
	CLR_BIT(PORTC, 3);
	if (!GET_BIT(PIND, 3)) return '-';
 11e:	8d e2       	ldi	r24, 0x2D	; 45
 120:	08 95       	ret
	if (!GET_BIT(PIND, 5)) return '3';
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	08 95       	ret
	if (!GET_BIT(PIND, 6)) return '2';
 126:	82 e3       	ldi	r24, 0x32	; 50
 128:	08 95       	ret
	if (!GET_BIT(PIND, 7)) return '1';
 12a:	81 e3       	ldi	r24, 0x31	; 49
 12c:	08 95       	ret

	SET_BIT(PORTC, 3);
	CLR_BIT(PORTC, 4);
	if (!GET_BIT(PIND, 3)) return '*';
 12e:	8a e2       	ldi	r24, 0x2A	; 42
 130:	08 95       	ret
	if (!GET_BIT(PIND, 5)) return '6';
 132:	86 e3       	ldi	r24, 0x36	; 54
 134:	08 95       	ret
	if (!GET_BIT(PIND, 6)) return '5';
 136:	85 e3       	ldi	r24, 0x35	; 53
 138:	08 95       	ret
	if (!GET_BIT(PIND, 7)) return '4';
 13a:	84 e3       	ldi	r24, 0x34	; 52
 13c:	08 95       	ret
	
	SET_BIT(PORTC, 4);
	CLR_BIT(PORTC, 5);
	if (!GET_BIT(PIND, 3)) return '/';
 13e:	8f e2       	ldi	r24, 0x2F	; 47
 140:	08 95       	ret
	if (!GET_BIT(PIND, 5)) return '9';
 142:	89 e3       	ldi	r24, 0x39	; 57
 144:	08 95       	ret
	if (!GET_BIT(PIND, 6)) return '8';
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	08 95       	ret
	if (!GET_BIT(PIND, 7)) return '7';
	
	return '\0';
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <LCD_command>:
	LCD_command(0x80);
}

void LCD_command(unsigned char cmd)
{
	CLR_BIT(PORTA, 3);
 14e:	9b b3       	in	r25, 0x1b	; 27
 150:	97 7f       	andi	r25, 0xF7	; 247
 152:	9b bb       	out	0x1b, r25	; 27
	
	PORTB &= 0b11101000;
 154:	98 b3       	in	r25, 0x18	; 24
 156:	98 7e       	andi	r25, 0xE8	; 232
 158:	98 bb       	out	0x18, r25	; 24
	unsigned char high = (cmd & 0xf0) >> 4;					//1111 0000		=>	 	//0000 1111
 15a:	28 2f       	mov	r18, r24
 15c:	22 95       	swap	r18
 15e:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char temp = ((high & 0b00001000) << 1) | (high & 0b00000111);			//0001 0111
 160:	92 2f       	mov	r25, r18
 162:	98 70       	andi	r25, 0x08	; 8
 164:	49 2f       	mov	r20, r25
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	27 70       	andi	r18, 0x07	; 7
 16e:	42 2b       	or	r20, r18
	PORTB |= temp;
 170:	98 b3       	in	r25, 0x18	; 24
 172:	49 2b       	or	r20, r25
 174:	48 bb       	out	0x18, r20	; 24
	
	CLR_BIT(PORTA, 2);
 176:	9b b3       	in	r25, 0x1b	; 27
 178:	9b 7f       	andi	r25, 0xFB	; 251
 17a:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(PORTA, 2);
 17c:	9b b3       	in	r25, 0x1b	; 27
 17e:	94 60       	ori	r25, 0x04	; 4
 180:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	ef e9       	ldi	r30, 0x9F	; 159
 184:	ff e0       	ldi	r31, 0x0F	; 15
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_command+0x38>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_command+0x3e>
 18c:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 18e:	9b b3       	in	r25, 0x1b	; 27
 190:	9b 7f       	andi	r25, 0xFB	; 251
 192:	9b bb       	out	0x1b, r25	; 27
	
	
	PORTB &= 0b11101000;
 194:	98 b3       	in	r25, 0x18	; 24
 196:	98 7e       	andi	r25, 0xE8	; 232
 198:	98 bb       	out	0x18, r25	; 24
	unsigned char low = cmd & 0x0f;
	unsigned char temp2 = ((low & 0b00001000) << 1) | (low & 0b00000111);
 19a:	98 2f       	mov	r25, r24
 19c:	98 70       	andi	r25, 0x08	; 8
 19e:	29 2f       	mov	r18, r25
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	87 70       	andi	r24, 0x07	; 7
 1a8:	28 2b       	or	r18, r24
	PORTB |= temp2;
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	28 2b       	or	r18, r24
 1ae:	28 bb       	out	0x18, r18	; 24
	
	CLR_BIT(PORTA, 2);
 1b0:	8b b3       	in	r24, 0x1b	; 27
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA, 2);
 1b6:	8b b3       	in	r24, 0x1b	; 27
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	8f e9       	ldi	r24, 0x9F	; 159
 1be:	9f e0       	ldi	r25, 0x0F	; 15
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_command+0x72>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_command+0x78>
 1c6:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	8b 7f       	andi	r24, 0xFB	; 251
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	ef e1       	ldi	r30, 0x1F	; 31
 1d0:	fe e4       	ldi	r31, 0x4E	; 78
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_command+0x84>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_command+0x8a>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <LCD_init>:
#include "LCD.h"

void LCD_init(void)
{
	SET_BIT(DDRA, 2);
 1dc:	8a b3       	in	r24, 0x1a	; 26
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA, 3);
 1e2:	8a b3       	in	r24, 0x1a	; 26
 1e4:	88 60       	ori	r24, 0x08	; 8
 1e6:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRB, 0);
 1e8:	87 b3       	in	r24, 0x17	; 23
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 1);
 1ee:	87 b3       	in	r24, 0x17	; 23
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 2);
 1f4:	87 b3       	in	r24, 0x17	; 23
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, 4);
 1fa:	87 b3       	in	r24, 0x17	; 23
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	87 bb       	out	0x17, r24	; 23
 200:	8f e5       	ldi	r24, 0x5F	; 95
 202:	9a ee       	ldi	r25, 0xEA	; 234
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_init+0x28>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_init+0x2e>
 20a:	00 00       	nop
	
	_delay_ms(15);
	LCD_command(0x02);
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_command>
	LCD_command(0x28);
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_command>
	LCD_command(0x0c);
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_command>
	LCD_command(0x01);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_command>
	LCD_command(0x80);
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_command>
 22a:	08 95       	ret

0000022c <LCD_char>:
	_delay_ms(5);
}

void LCD_char(unsigned char chr)
{
	SET_BIT(PORTA, 3);
 22c:	9b b3       	in	r25, 0x1b	; 27
 22e:	98 60       	ori	r25, 0x08	; 8
 230:	9b bb       	out	0x1b, r25	; 27
	
	PORTB &= 0b11101000;
 232:	98 b3       	in	r25, 0x18	; 24
 234:	98 7e       	andi	r25, 0xE8	; 232
 236:	98 bb       	out	0x18, r25	; 24
	unsigned char high = (chr & 0xf0) >> 4;					//1111 0000		=>	 	//0000 1111
 238:	28 2f       	mov	r18, r24
 23a:	22 95       	swap	r18
 23c:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char temp = ((high & 0b00001000) << 1) | (high & 0b00000111);			//0001 0111
 23e:	92 2f       	mov	r25, r18
 240:	98 70       	andi	r25, 0x08	; 8
 242:	49 2f       	mov	r20, r25
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	44 0f       	add	r20, r20
 248:	55 1f       	adc	r21, r21
 24a:	27 70       	andi	r18, 0x07	; 7
 24c:	42 2b       	or	r20, r18
	PORTB |= temp;
 24e:	98 b3       	in	r25, 0x18	; 24
 250:	49 2b       	or	r20, r25
 252:	48 bb       	out	0x18, r20	; 24
	
	CLR_BIT(PORTA, 2);
 254:	9b b3       	in	r25, 0x1b	; 27
 256:	9b 7f       	andi	r25, 0xFB	; 251
 258:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(PORTA, 2);
 25a:	9b b3       	in	r25, 0x1b	; 27
 25c:	94 60       	ori	r25, 0x04	; 4
 25e:	9b bb       	out	0x1b, r25	; 27
 260:	ef e9       	ldi	r30, 0x9F	; 159
 262:	ff e0       	ldi	r31, 0x0F	; 15
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCD_char+0x38>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_char+0x3e>
 26a:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 26c:	9b b3       	in	r25, 0x1b	; 27
 26e:	9b 7f       	andi	r25, 0xFB	; 251
 270:	9b bb       	out	0x1b, r25	; 27
	
	
	PORTB &= 0b11101000;
 272:	98 b3       	in	r25, 0x18	; 24
 274:	98 7e       	andi	r25, 0xE8	; 232
 276:	98 bb       	out	0x18, r25	; 24
	unsigned char low = chr & 0x0f;
	unsigned char temp2 = ((low & 0b00001000) << 1) | (low & 0b00000111);
 278:	98 2f       	mov	r25, r24
 27a:	98 70       	andi	r25, 0x08	; 8
 27c:	29 2f       	mov	r18, r25
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	87 70       	andi	r24, 0x07	; 7
 286:	28 2b       	or	r18, r24
	PORTB |= temp2;
 288:	88 b3       	in	r24, 0x18	; 24
 28a:	28 2b       	or	r18, r24
 28c:	28 bb       	out	0x18, r18	; 24
	
	CLR_BIT(PORTA, 2);
 28e:	8b b3       	in	r24, 0x1b	; 27
 290:	8b 7f       	andi	r24, 0xFB	; 251
 292:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA, 2);
 294:	8b b3       	in	r24, 0x1b	; 27
 296:	84 60       	ori	r24, 0x04	; 4
 298:	8b bb       	out	0x1b, r24	; 27
 29a:	8f e9       	ldi	r24, 0x9F	; 159
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_char+0x72>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_char+0x78>
 2a4:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(PORTA, 2);
 2a6:	8b b3       	in	r24, 0x1b	; 27
 2a8:	8b 7f       	andi	r24, 0xFB	; 251
 2aa:	8b bb       	out	0x1b, r24	; 27
 2ac:	ef e1       	ldi	r30, 0x1F	; 31
 2ae:	fe e4       	ldi	r31, 0x4E	; 78
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_char+0x84>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_char+0x8a>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <LCD_string>:
	_delay_ms(5);

}

void LCD_string(char* str)
{
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++)
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <LCD_string+0x16>
	{
		LCD_char(str[i]);
 2ca:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_char>

}

void LCD_string(char* str)
{
	for (int i = 0; str[i]; i++)
 2ce:	21 96       	adiw	r28, 0x01	; 1
 2d0:	f8 01       	movw	r30, r16
 2d2:	ec 0f       	add	r30, r28
 2d4:	fd 1f       	adc	r31, r29
 2d6:	80 81       	ld	r24, Z
 2d8:	81 11       	cpse	r24, r1
 2da:	f7 cf       	rjmp	.-18     	; 0x2ca <LCD_string+0x10>
	{
		LCD_char(str[i]);
	}
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <LCD_clear>:

void LCD_clear()
{
	LCD_command(0x01);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_command>
 2ec:	8f e3       	ldi	r24, 0x3F	; 63
 2ee:	9c e9       	ldi	r25, 0x9C	; 156
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_clear+0xa>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_clear+0x10>
 2f6:	00 00       	nop
 2f8:	08 95       	ret

000002fa <LCD_gotoxy>:
}

void LCD_gotoxy(unsigned char row, unsigned char col)
{
	unsigned char address = 0;
	switch(row)
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	39 f0       	breq	.+14     	; 0x30c <LCD_gotoxy+0x12>
 2fe:	58 f0       	brcs	.+22     	; 0x316 <LCD_gotoxy+0x1c>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	31 f0       	breq	.+12     	; 0x310 <LCD_gotoxy+0x16>
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	31 f0       	breq	.+12     	; 0x314 <LCD_gotoxy+0x1a>
	_delay_ms(10);
}

void LCD_gotoxy(unsigned char row, unsigned char col)
{
	unsigned char address = 0;
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	05 c0       	rjmp	.+10     	; 0x316 <LCD_gotoxy+0x1c>
	{
		case 0:
		address = col;
		break;
		case 1:
		address = col + 0x40;
 30c:	60 5c       	subi	r22, 0xC0	; 192
		break;
 30e:	03 c0       	rjmp	.+6      	; 0x316 <LCD_gotoxy+0x1c>
		case 2:
		address = col + 0x14;
 310:	6c 5e       	subi	r22, 0xEC	; 236
		break;
 312:	01 c0       	rjmp	.+2      	; 0x316 <LCD_gotoxy+0x1c>
		case 3:
		address = col + 0x54;
 314:	6c 5a       	subi	r22, 0xAC	; 172
		break;
	}
	LCD_command(address | 0x80);
 316:	86 2f       	mov	r24, r22
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_command>
 31e:	08 95       	ret

00000320 <main>:
#include "searching.h"

int main(void)
{
    // Initiation:
	keypad_init();	
 320:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
	leds_init();
 324:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <leds_init>
	LCD_init();
 328:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_init>
	
	input_numbers();
 32c:	0e 94 9f 01 	call	0x33e	; 0x33e <input_numbers>
	input_target();
 330:	0e 94 10 02 	call	0x420	; 0x420 <input_target>
	search();
 334:	0e 94 45 02 	call	0x48a	; 0x48a <search>
	display_positions();
 338:	0e 94 9a 02 	call	0x534	; 0x534 <display_positions>
 33c:	ff cf       	rjmp	.-2      	; 0x33c <main+0x1c>

0000033e <input_numbers>:
	}
	target = pos = 0;
}

void input_numbers()
{
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
	LCD_string("Enter numbers: ");
 344:	80 e6       	ldi	r24, 0x60	; 96
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_string>
	LCD_gotoxy(1, 0);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_gotoxy>
	int mx = 0;
 354:	00 e0       	ldi	r16, 0x00	; 0
 356:	10 e0       	ldi	r17, 0x00	; 0
	while (1)
	{
		char key = keypad_read();
 358:	0e 94 50 00 	call	0xa0	; 0xa0 <keypad_read>
 35c:	c8 2f       	mov	r28, r24
		if (key >= '0' && key <= '9')
 35e:	80 ed       	ldi	r24, 0xD0	; 208
 360:	8c 0f       	add	r24, r28
 362:	8a 30       	cpi	r24, 0x0A	; 10
 364:	18 f5       	brcc	.+70     	; 0x3ac <input_numbers+0x6e>
		{
			LCD_char(key);
 366:	8c 2f       	mov	r24, r28
 368:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_char>
			numbers[pos] = numbers[pos] * 10 + (key - '0');
 36c:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__data_end>
 370:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <__data_end+0x1>
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	ec 54       	subi	r30, 0x4C	; 76
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	20 81       	ld	r18, Z
 37e:	31 81       	ldd	r19, Z+1	; 0x01
 380:	c9 01       	movw	r24, r18
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	22 0f       	add	r18, r18
 390:	33 1f       	adc	r19, r19
 392:	82 0f       	add	r24, r18
 394:	93 1f       	adc	r25, r19
 396:	2c 2f       	mov	r18, r28
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	20 53       	subi	r18, 0x30	; 48
 39c:	31 09       	sbc	r19, r1
 39e:	82 0f       	add	r24, r18
 3a0:	93 1f       	adc	r25, r19
 3a2:	91 83       	std	Z+1, r25	; 0x01
 3a4:	80 83       	st	Z, r24
			mx++;
 3a6:	0f 5f       	subi	r16, 0xFF	; 255
 3a8:	1f 4f       	sbci	r17, 0xFF	; 255
 3aa:	2c c0       	rjmp	.+88     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		}
		else if (key == '+')
 3ac:	cb 32       	cpi	r28, 0x2B	; 43
 3ae:	71 f4       	brne	.+28     	; 0x3cc <input_numbers+0x8e>
		{
			pos++;
 3b0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 3b4:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__data_end+0x1>
 3be:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
			LCD_string(", ");
 3c2:	80 e7       	ldi	r24, 0x70	; 112
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_string>
 3ca:	1c c0       	rjmp	.+56     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		}
		else if (key == '&' || mx == 16)
 3cc:	c6 32       	cpi	r28, 0x26	; 38
 3ce:	19 f0       	breq	.+6      	; 0x3d6 <input_numbers+0x98>
 3d0:	00 31       	cpi	r16, 0x10	; 16
 3d2:	11 05       	cpc	r17, r1
 3d4:	b9 f4       	brne	.+46     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			numbers[pos + 1] = -1;
 3d6:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__data_end>
 3da:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <__data_end+0x1>
 3de:	31 96       	adiw	r30, 0x01	; 1
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	ec 54       	subi	r30, 0x4C	; 76
 3e6:	ff 4f       	sbci	r31, 0xFF	; 255
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	9f ef       	ldi	r25, 0xFF	; 255
 3ec:	91 83       	std	Z+1, r25	; 0x01
 3ee:	80 83       	st	Z, r24
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	83 ec       	ldi	r24, 0xC3	; 195
 3f4:	99 e0       	ldi	r25, 0x09	; 9
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <input_numbers+0xb8>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
			_delay_ms(200);
			return;
 402:	0a c0       	rjmp	.+20     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	83 ec       	ldi	r24, 0xC3	; 195
 408:	99 e0       	ldi	r25, 0x09	; 9
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	90 40       	sbci	r25, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
 416:	a0 cf       	rjmp	.-192    	; 0x358 <input_numbers+0x1a>
		}
		_delay_ms(200);
	}
}
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <input_target>:

void input_target()
{
 420:	cf 93       	push	r28
	LCD_clear();
 422:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_clear>
	LCD_string("Enter target: ");
 426:	83 e7       	ldi	r24, 0x73	; 115
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_string>
	while (1)
	{
		char key = keypad_read();
 42e:	0e 94 50 00 	call	0xa0	; 0xa0 <keypad_read>
 432:	c8 2f       	mov	r28, r24
		if (key >= '0' && key <= '9')
 434:	80 ed       	ldi	r24, 0xD0	; 208
 436:	8c 0f       	add	r24, r28
 438:	8a 30       	cpi	r24, 0x0A	; 10
 43a:	c8 f4       	brcc	.+50     	; 0x46e <input_target+0x4e>
		{
			LCD_char(key);
 43c:	8c 2f       	mov	r24, r28
 43e:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_char>
			target = target * 10 + key - '0';
 442:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <target>
 446:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <target+0x1>
 44a:	9c 01       	movw	r18, r24
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	82 0f       	add	r24, r18
 45e:	93 1f       	adc	r25, r19
 460:	8c 0f       	add	r24, r28
 462:	91 1d       	adc	r25, r1
 464:	c0 97       	sbiw	r24, 0x30	; 48
 466:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <target+0x1>
 46a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <target>
		}
		if (key == '&')
 46e:	c6 32       	cpi	r28, 0x26	; 38
 470:	51 f0       	breq	.+20     	; 0x486 <input_target+0x66>
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	83 ec       	ldi	r24, 0xC3	; 195
 476:	99 e0       	ldi	r25, 0x09	; 9
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <input_target+0x58>
 480:	00 c0       	rjmp	.+0      	; 0x482 <input_target+0x62>
 482:	00 00       	nop
 484:	d4 cf       	rjmp	.-88     	; 0x42e <input_target+0xe>
		{
			return;
		}
		_delay_ms(200);
	}
}
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <search>:

void search()
{
	int j = 0;
	for (int i = 0; i < size; i++)
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void search()
{
	int j = 0;
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	70 e0       	ldi	r23, 0x00	; 0
	for (int i = 0; i < size; i++)
 492:	1c c0       	rjmp	.+56     	; 0x4cc <search+0x42>
	{
		if (numbers[i] == -1)
 494:	fc 01       	movw	r30, r24
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ec 54       	subi	r30, 0x4C	; 76
 49c:	ff 4f       	sbci	r31, 0xFF	; 255
 49e:	20 81       	ld	r18, Z
 4a0:	31 81       	ldd	r19, Z+1	; 0x01
 4a2:	2f 3f       	cpi	r18, 0xFF	; 255
 4a4:	4f ef       	ldi	r20, 0xFF	; 255
 4a6:	34 07       	cpc	r19, r20
 4a8:	a1 f0       	breq	.+40     	; 0x4d2 <search+0x48>
		{
			return;
		}
		if (target == numbers[i])
 4aa:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <target>
 4ae:	50 91 d7 00 	lds	r21, 0x00D7	; 0x8000d7 <target+0x1>
 4b2:	24 17       	cp	r18, r20
 4b4:	35 07       	cpc	r19, r21
 4b6:	49 f4       	brne	.+18     	; 0x4ca <search+0x40>
		{
			positions[j] = i;
 4b8:	fb 01       	movw	r30, r22
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	ee 56       	subi	r30, 0x6E	; 110
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	91 83       	std	Z+1, r25	; 0x01
 4c4:	80 83       	st	Z, r24
			j++;
 4c6:	6f 5f       	subi	r22, 0xFF	; 255
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
}

void search()
{
	int j = 0;
	for (int i = 0; i < size; i++)
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	81 31       	cpi	r24, 0x11	; 17
 4ce:	91 05       	cpc	r25, r1
 4d0:	0c f3       	brlt	.-62     	; 0x494 <search+0xa>
 4d2:	08 95       	ret

000004d4 <leds_init>:
	}
}

void leds_init()
{
	DDRA = 0b01110000;
 4d4:	80 e7       	ldi	r24, 0x70	; 112
 4d6:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1 << 7);
 4d8:	87 b3       	in	r24, 0x17	; 23
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	87 bb       	out	0x17, r24	; 23
 4de:	08 95       	ret

000004e0 <leds_on>:
}

void leds_on(int i)
{
	switch(i)
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	91 05       	cpc	r25, r1
 4e4:	71 f0       	breq	.+28     	; 0x502 <leds_on+0x22>
 4e6:	1c f4       	brge	.+6      	; 0x4ee <leds_on+0xe>
 4e8:	89 2b       	or	r24, r25
 4ea:	39 f0       	breq	.+14     	; 0x4fa <leds_on+0x1a>
 4ec:	08 95       	ret
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	91 05       	cpc	r25, r1
 4f2:	59 f0       	breq	.+22     	; 0x50a <leds_on+0x2a>
 4f4:	03 97       	sbiw	r24, 0x03	; 3
 4f6:	69 f0       	breq	.+26     	; 0x512 <leds_on+0x32>
 4f8:	08 95       	ret
	{
		case 0: SET_BIT(PORTA, 4); return;
 4fa:	8b b3       	in	r24, 0x1b	; 27
 4fc:	80 61       	ori	r24, 0x10	; 16
 4fe:	8b bb       	out	0x1b, r24	; 27
 500:	08 95       	ret
		case 1: SET_BIT(PORTA, 5); return;
 502:	8b b3       	in	r24, 0x1b	; 27
 504:	80 62       	ori	r24, 0x20	; 32
 506:	8b bb       	out	0x1b, r24	; 27
 508:	08 95       	ret
		case 2: SET_BIT(PORTA, 6); return;
 50a:	8b b3       	in	r24, 0x1b	; 27
 50c:	80 64       	ori	r24, 0x40	; 64
 50e:	8b bb       	out	0x1b, r24	; 27
 510:	08 95       	ret
		case 3: SET_BIT(PORTB, 7); return;
 512:	88 b3       	in	r24, 0x18	; 24
 514:	80 68       	ori	r24, 0x80	; 128
 516:	88 bb       	out	0x18, r24	; 24
 518:	08 95       	ret

0000051a <leds_of>:
	}
}

void leds_of()
{
	CLR_BIT(PORTA, 4);
 51a:	8b b3       	in	r24, 0x1b	; 27
 51c:	8f 7e       	andi	r24, 0xEF	; 239
 51e:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA, 5);
 520:	8b b3       	in	r24, 0x1b	; 27
 522:	8f 7d       	andi	r24, 0xDF	; 223
 524:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA, 6);
 526:	8b b3       	in	r24, 0x1b	; 27
 528:	8f 7b       	andi	r24, 0xBF	; 191
 52a:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTB, 7);
 52c:	88 b3       	in	r24, 0x18	; 24
 52e:	8f 77       	andi	r24, 0x7F	; 127
 530:	88 bb       	out	0x18, r24	; 24
 532:	08 95       	ret

00000534 <display_positions>:
	// 	positions[2] = 5;
	// 	positions[3] = 15;
	// 	positions[4] = -1;

void display_positions()
{
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
	seven_segment_init();
 540:	0e 94 e6 02 	call	0x5cc	; 0x5cc <seven_segment_init>
	LCD_clear();
 544:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_clear>
	LCD_string("Positions...");
 548:	82 e8       	ldi	r24, 0x82	; 130
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_string>
	
	for (int i = 0; i < size; i++)
 550:	e1 2c       	mov	r14, r1
 552:	f1 2c       	mov	r15, r1
 554:	30 c0       	rjmp	.+96     	; 0x5b6 <display_positions+0x82>
	{
		int num = positions[i];
 556:	f7 01       	movw	r30, r14
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	ee 56       	subi	r30, 0x6E	; 110
 55e:	ff 4f       	sbci	r31, 0xFF	; 255
 560:	c0 81       	ld	r28, Z
 562:	d1 81       	ldd	r29, Z+1	; 0x01
		if (num == -1)return;
 564:	cf 3f       	cpi	r28, 0xFF	; 255
 566:	2f ef       	ldi	r18, 0xFF	; 255
 568:	d2 07       	cpc	r29, r18
 56a:	49 f1       	breq	.+82     	; 0x5be <display_positions+0x8a>
		
		seven_segment_display(num);		//display 7-segment
 56c:	ce 01       	movw	r24, r28
 56e:	0e 94 ed 02 	call	0x5da	; 0x5da <seven_segment_display>
		
		for (int j = 0; j < 4; j++)		//display leds
 572:	00 e0       	ldi	r16, 0x00	; 0
 574:	10 e0       	ldi	r17, 0x00	; 0
 576:	0e c0       	rjmp	.+28     	; 0x594 <display_positions+0x60>
		{
			if (num % 2 != 0)
 578:	c0 ff       	sbrs	r28, 0
 57a:	03 c0       	rjmp	.+6      	; 0x582 <display_positions+0x4e>
			{
				leds_on(j);
 57c:	c8 01       	movw	r24, r16
 57e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <leds_on>
			}
			num /= 2;
 582:	ce 01       	movw	r24, r28
 584:	dd 23       	and	r29, r29
 586:	0c f4       	brge	.+2      	; 0x58a <display_positions+0x56>
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	ec 01       	movw	r28, r24
 58c:	d5 95       	asr	r29
 58e:	c7 95       	ror	r28
		int num = positions[i];
		if (num == -1)return;
		
		seven_segment_display(num);		//display 7-segment
		
		for (int j = 0; j < 4; j++)		//display leds
 590:	0f 5f       	subi	r16, 0xFF	; 255
 592:	1f 4f       	sbci	r17, 0xFF	; 255
 594:	04 30       	cpi	r16, 0x04	; 4
 596:	11 05       	cpc	r17, r1
 598:	7c f3       	brlt	.-34     	; 0x578 <display_positions+0x44>
 59a:	9f ef       	ldi	r25, 0xFF	; 255
 59c:	23 ed       	ldi	r18, 0xD3	; 211
 59e:	80 e3       	ldi	r24, 0x30	; 48
 5a0:	91 50       	subi	r25, 0x01	; 1
 5a2:	20 40       	sbci	r18, 0x00	; 0
 5a4:	80 40       	sbci	r24, 0x00	; 0
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <display_positions+0x6c>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <display_positions+0x76>
 5aa:	00 00       	nop
			}
			num /= 2;
		}
		
		_delay_ms(1000);
		leds_of();
 5ac:	0e 94 8d 02 	call	0x51a	; 0x51a <leds_of>
{
	seven_segment_init();
	LCD_clear();
	LCD_string("Positions...");
	
	for (int i = 0; i < size; i++)
 5b0:	9f ef       	ldi	r25, 0xFF	; 255
 5b2:	e9 1a       	sub	r14, r25
 5b4:	f9 0a       	sbc	r15, r25
 5b6:	21 e1       	ldi	r18, 0x11	; 17
 5b8:	e2 16       	cp	r14, r18
 5ba:	f1 04       	cpc	r15, r1
 5bc:	64 f2       	brlt	.-104    	; 0x556 <display_positions+0x22>
		}
		
		_delay_ms(1000);
		leds_of();
	}
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	08 95       	ret

000005cc <seven_segment_init>:
#include "seven_segment.h"

void seven_segment_init(void)
{
	SET_BIT(DDRA, 3);
 5cc:	8a b3       	in	r24, 0x1a	; 26
 5ce:	88 60       	ori	r24, 0x08	; 8
 5d0:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0b00010111;
 5d2:	87 b3       	in	r24, 0x17	; 23
 5d4:	87 61       	ori	r24, 0x17	; 23
 5d6:	87 bb       	out	0x17, r24	; 23
 5d8:	08 95       	ret

000005da <seven_segment_display>:
}

void seven_segment_display(int digit)
{
	digit %= 10;
 5da:	6a e0       	ldi	r22, 0x0A	; 10
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__divmodhi4>
	PORTB &= 0b11101000;
 5e2:	28 b3       	in	r18, 0x18	; 24
 5e4:	28 7e       	andi	r18, 0xE8	; 232
 5e6:	28 bb       	out	0x18, r18	; 24
	PORTB |= (((digit & 0b00001000) << 1) | (digit & 0b00000111));
 5e8:	48 b3       	in	r20, 0x18	; 24
 5ea:	9c 01       	movw	r18, r24
 5ec:	28 70       	andi	r18, 0x08	; 8
 5ee:	33 27       	eor	r19, r19
 5f0:	22 0f       	add	r18, r18
 5f2:	33 1f       	adc	r19, r19
 5f4:	87 70       	andi	r24, 0x07	; 7
 5f6:	28 2b       	or	r18, r24
 5f8:	24 2b       	or	r18, r20
 5fa:	28 bb       	out	0x18, r18	; 24
 5fc:	08 95       	ret

000005fe <__divmodhi4>:
 5fe:	97 fb       	bst	r25, 7
 600:	07 2e       	mov	r0, r23
 602:	16 f4       	brtc	.+4      	; 0x608 <__divmodhi4+0xa>
 604:	00 94       	com	r0
 606:	07 d0       	rcall	.+14     	; 0x616 <__divmodhi4_neg1>
 608:	77 fd       	sbrc	r23, 7
 60a:	09 d0       	rcall	.+18     	; 0x61e <__divmodhi4_neg2>
 60c:	0e 94 13 03 	call	0x626	; 0x626 <__udivmodhi4>
 610:	07 fc       	sbrc	r0, 7
 612:	05 d0       	rcall	.+10     	; 0x61e <__divmodhi4_neg2>
 614:	3e f4       	brtc	.+14     	; 0x624 <__divmodhi4_exit>

00000616 <__divmodhi4_neg1>:
 616:	90 95       	com	r25
 618:	81 95       	neg	r24
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	08 95       	ret

0000061e <__divmodhi4_neg2>:
 61e:	70 95       	com	r23
 620:	61 95       	neg	r22
 622:	7f 4f       	sbci	r23, 0xFF	; 255

00000624 <__divmodhi4_exit>:
 624:	08 95       	ret

00000626 <__udivmodhi4>:
 626:	aa 1b       	sub	r26, r26
 628:	bb 1b       	sub	r27, r27
 62a:	51 e1       	ldi	r21, 0x11	; 17
 62c:	07 c0       	rjmp	.+14     	; 0x63c <__udivmodhi4_ep>

0000062e <__udivmodhi4_loop>:
 62e:	aa 1f       	adc	r26, r26
 630:	bb 1f       	adc	r27, r27
 632:	a6 17       	cp	r26, r22
 634:	b7 07       	cpc	r27, r23
 636:	10 f0       	brcs	.+4      	; 0x63c <__udivmodhi4_ep>
 638:	a6 1b       	sub	r26, r22
 63a:	b7 0b       	sbc	r27, r23

0000063c <__udivmodhi4_ep>:
 63c:	88 1f       	adc	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	5a 95       	dec	r21
 642:	a9 f7       	brne	.-22     	; 0x62e <__udivmodhi4_loop>
 644:	80 95       	com	r24
 646:	90 95       	com	r25
 648:	bc 01       	movw	r22, r24
 64a:	cd 01       	movw	r24, r26
 64c:	08 95       	ret

0000064e <_exit>:
 64e:	f8 94       	cli

00000650 <__stop_program>:
 650:	ff cf       	rjmp	.-2      	; 0x650 <__stop_program>
